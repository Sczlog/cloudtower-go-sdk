// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OvfDiskOperate ovf disk operate
//
// swagger:model OvfDiskOperate
type OvfDiskOperate struct {

	// modify cd roms
	ModifyCdRoms []*VmdkCdromModify `json:"modify_cd_roms,omitempty"`

	// modify vmdk disks
	ModifyVmdkDisks []*VmdkDiskModify `json:"modify_vmdk_disks,omitempty"`

	// new disks
	NewDisks *VMDiskParams `json:"new_disks,omitempty"`
}

// Validate validates this ovf disk operate
func (m *OvfDiskOperate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModifyCdRoms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifyVmdkDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewDisks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OvfDiskOperate) validateModifyCdRoms(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifyCdRoms) { // not required
		return nil
	}

	for i := 0; i < len(m.ModifyCdRoms); i++ {
		if swag.IsZero(m.ModifyCdRoms[i]) { // not required
			continue
		}

		if m.ModifyCdRoms[i] != nil {
			if err := m.ModifyCdRoms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modify_cd_roms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("modify_cd_roms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OvfDiskOperate) validateModifyVmdkDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifyVmdkDisks) { // not required
		return nil
	}

	for i := 0; i < len(m.ModifyVmdkDisks); i++ {
		if swag.IsZero(m.ModifyVmdkDisks[i]) { // not required
			continue
		}

		if m.ModifyVmdkDisks[i] != nil {
			if err := m.ModifyVmdkDisks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modify_vmdk_disks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("modify_vmdk_disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OvfDiskOperate) validateNewDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.NewDisks) { // not required
		return nil
	}

	if m.NewDisks != nil {
		if err := m.NewDisks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("new_disks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("new_disks")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ovf disk operate based on the context it is used
func (m *OvfDiskOperate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateModifyCdRoms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModifyVmdkDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNewDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OvfDiskOperate) contextValidateModifyCdRoms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ModifyCdRoms); i++ {

		if m.ModifyCdRoms[i] != nil {
			if err := m.ModifyCdRoms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modify_cd_roms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("modify_cd_roms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OvfDiskOperate) contextValidateModifyVmdkDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ModifyVmdkDisks); i++ {

		if m.ModifyVmdkDisks[i] != nil {
			if err := m.ModifyVmdkDisks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modify_vmdk_disks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("modify_vmdk_disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OvfDiskOperate) contextValidateNewDisks(ctx context.Context, formats strfmt.Registry) error {

	if m.NewDisks != nil {
		if err := m.NewDisks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("new_disks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("new_disks")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OvfDiskOperate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OvfDiskOperate) UnmarshalBinary(b []byte) error {
	var res OvfDiskOperate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
