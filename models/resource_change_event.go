// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceChangeEvent resource change event
//
// swagger:model ResourceChangeEvent
type ResourceChangeEvent struct {

	// action
	Action *string `json:"action,omitempty"`

	// created at
	CreatedAt *string `json:"created_at,omitempty"`

	// new value
	NewValue *string `json:"new_value,omitempty"`

	// old value
	OldValue *string `json:"old_value,omitempty"`

	// prev revision
	PrevRevision *string `json:"prev_revision,omitempty"`

	// resource id
	ResourceID *string `json:"resource_id,omitempty"`

	// resource type
	ResourceType *string `json:"resource_type,omitempty"`

	// revision
	// Required: true
	Revision *string `json:"revision"`
}

// Validate validates this resource change event
func (m *ResourceChangeEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceChangeEvent) validateRevision(formats strfmt.Registry) error {

	if err := validate.Required("revision", "body", m.Revision); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this resource change event based on context it is used
func (m *ResourceChangeEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResourceChangeEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceChangeEvent) UnmarshalBinary(b []byte) error {
	var res ResourceChangeEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
