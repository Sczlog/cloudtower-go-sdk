// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ApplicationVMSpecPlacementVerb application Vm spec placement verb
//
// swagger:model ApplicationVmSpecPlacementVerb
type ApplicationVMSpecPlacementVerb string

func NewApplicationVMSpecPlacementVerb(value ApplicationVMSpecPlacementVerb) *ApplicationVMSpecPlacementVerb {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ApplicationVMSpecPlacementVerb.
func (m ApplicationVMSpecPlacementVerb) Pointer() *ApplicationVMSpecPlacementVerb {
	return &m
}

const (

	// ApplicationVMSpecPlacementVerbMUST captures enum value "MUST"
	ApplicationVMSpecPlacementVerbMUST ApplicationVMSpecPlacementVerb = "MUST"

	// ApplicationVMSpecPlacementVerbPREFER captures enum value "PREFER"
	ApplicationVMSpecPlacementVerbPREFER ApplicationVMSpecPlacementVerb = "PREFER"
)

// for schema
var applicationVmSpecPlacementVerbEnum []interface{}

func init() {
	var res []ApplicationVMSpecPlacementVerb
	if err := json.Unmarshal([]byte(`["MUST","PREFER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationVmSpecPlacementVerbEnum = append(applicationVmSpecPlacementVerbEnum, v)
	}
}

func (m ApplicationVMSpecPlacementVerb) validateApplicationVMSpecPlacementVerbEnum(path, location string, value ApplicationVMSpecPlacementVerb) error {
	if err := validate.EnumCase(path, location, value, applicationVmSpecPlacementVerbEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this application Vm spec placement verb
func (m ApplicationVMSpecPlacementVerb) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateApplicationVMSpecPlacementVerbEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this application Vm spec placement verb based on context it is used
func (m ApplicationVMSpecPlacementVerb) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
