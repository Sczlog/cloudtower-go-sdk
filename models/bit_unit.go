// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BitUnit bit unit
//
// swagger:model BitUnit
type BitUnit string

func NewBitUnit(value BitUnit) *BitUnit {
	return &value
}

// Pointer returns a pointer to a freshly-allocated BitUnit.
func (m BitUnit) Pointer() *BitUnit {
	return &m
}

const (

	// BitUnitBit captures enum value "bit"
	BitUnitBit BitUnit = "bit"

	// BitUnitKb captures enum value "Kb"
	BitUnitKb BitUnit = "Kb"

	// BitUnitMb captures enum value "Mb"
	BitUnitMb BitUnit = "Mb"

	// BitUnitGb captures enum value "Gb"
	BitUnitGb BitUnit = "Gb"

	// BitUnitTb captures enum value "Tb"
	BitUnitTb BitUnit = "Tb"

	// BitUnitPb captures enum value "Pb"
	BitUnitPb BitUnit = "Pb"
)

// for schema
var bitUnitEnum []interface{}

func init() {
	var res []BitUnit
	if err := json.Unmarshal([]byte(`["bit","Kb","Mb","Gb","Tb","Pb"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bitUnitEnum = append(bitUnitEnum, v)
	}
}

func (m BitUnit) validateBitUnitEnum(path, location string, value BitUnit) error {
	if err := validate.EnumCase(path, location, value, bitUnitEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this bit unit
func (m BitUnit) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBitUnitEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this bit unit based on context it is used
func (m BitUnit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
