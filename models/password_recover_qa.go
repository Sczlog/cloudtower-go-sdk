// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PasswordRecoverQa password recover qa
//
// swagger:model PasswordRecoverQa
type PasswordRecoverQa struct {

	// typename
	// Enum: [PasswordRecoverQa]
	Typename *string `json:"__typename,omitempty"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// items
	Items []*PasswordReoverQaItem `json:"items,omitempty"`
}

// Validate validates this password recover qa
func (m *PasswordRecoverQa) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTypename(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var passwordRecoverQaTypeTypenamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PasswordRecoverQa"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		passwordRecoverQaTypeTypenamePropEnum = append(passwordRecoverQaTypeTypenamePropEnum, v)
	}
}

const (

	// PasswordRecoverQaTypenamePasswordRecoverQa captures enum value "PasswordRecoverQa"
	PasswordRecoverQaTypenamePasswordRecoverQa string = "PasswordRecoverQa"
)

// prop value enum
func (m *PasswordRecoverQa) validateTypenameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, passwordRecoverQaTypeTypenamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PasswordRecoverQa) validateTypename(formats strfmt.Registry) error {
	if swag.IsZero(m.Typename) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypenameEnum("__typename", "body", *m.Typename); err != nil {
		return err
	}

	return nil
}

func (m *PasswordRecoverQa) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *PasswordRecoverQa) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(m.Items) { // not required
		return nil
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this password recover qa based on the context it is used
func (m *PasswordRecoverQa) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PasswordRecoverQa) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Items); i++ {

		if m.Items[i] != nil {
			if err := m.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PasswordRecoverQa) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PasswordRecoverQa) UnmarshalBinary(b []byte) error {
	var res PasswordRecoverQa
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
