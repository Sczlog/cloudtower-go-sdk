// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ContentLanguage content language
//
// swagger:model ContentLanguage
type ContentLanguage string

func NewContentLanguage(value ContentLanguage) *ContentLanguage {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ContentLanguage.
func (m ContentLanguage) Pointer() *ContentLanguage {
	return &m
}

const (

	// ContentLanguageZhDashCN captures enum value "zh-CN"
	ContentLanguageZhDashCN ContentLanguage = "zh-CN"

	// ContentLanguageEnDashUS captures enum value "en-US"
	ContentLanguageEnDashUS ContentLanguage = "en-US"

	// ContentLanguageAsterisk captures enum value "*"
	ContentLanguageAsterisk ContentLanguage = "*"
)

// for schema
var contentLanguageEnum []interface{}

func init() {
	var res []ContentLanguage
	if err := json.Unmarshal([]byte(`["zh-CN","en-US","*"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contentLanguageEnum = append(contentLanguageEnum, v)
	}
}

func (m ContentLanguage) validateContentLanguageEnum(path, location string, value ContentLanguage) error {
	if err := validate.EnumCase(path, location, value, contentLanguageEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this content language
func (m ContentLanguage) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateContentLanguageEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this content language based on context it is used
func (m ContentLanguage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
