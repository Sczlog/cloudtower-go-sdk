// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ApplicationVMSpec application Vm spec
//
// swagger:model ApplicationVmSpec
type ApplicationVMSpec struct {

	// cloud init user data
	CloudInitUserData *string `json:"cloudInitUserData,omitempty"`

	// cluster
	Cluster *string `json:"cluster,omitempty"`

	// cpu
	CPU *int32 `json:"cpu,omitempty"`

	// env
	Env []*ApplicationVMSpecEnv `json:"env,omitempty"`

	// host
	Host *string `json:"host,omitempty"`

	// image
	Image *string `json:"image,omitempty"`

	// internal
	Internal *bool `json:"internal,omitempty"`

	// memory
	Memory *int64 `json:"memory,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// network
	Network *ApplicationVMSpecNetwork `json:"network,omitempty"`

	// public keys
	PublicKeys []string `json:"publicKeys,omitempty"`

	// status
	Status *ApplicationVMSpecStatus `json:"status,omitempty"`

	// storages
	Storages []*ApplicationVMSpecStorage `json:"storages,omitempty"`

	// vm usage
	VMUsage *VMUsage `json:"vmUsage,omitempty"`
}

// Validate validates this application Vm spec
func (m *ApplicationVMSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnv(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMUsage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationVMSpec) validateEnv(formats strfmt.Registry) error {
	if swag.IsZero(m.Env) { // not required
		return nil
	}

	for i := 0; i < len(m.Env); i++ {
		if swag.IsZero(m.Env[i]) { // not required
			continue
		}

		if m.Env[i] != nil {
			if err := m.Env[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("env" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("env" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationVMSpec) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationVMSpec) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationVMSpec) validateStorages(formats strfmt.Registry) error {
	if swag.IsZero(m.Storages) { // not required
		return nil
	}

	for i := 0; i < len(m.Storages); i++ {
		if swag.IsZero(m.Storages[i]) { // not required
			continue
		}

		if m.Storages[i] != nil {
			if err := m.Storages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationVMSpec) validateVMUsage(formats strfmt.Registry) error {
	if swag.IsZero(m.VMUsage) { // not required
		return nil
	}

	if m.VMUsage != nil {
		if err := m.VMUsage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmUsage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmUsage")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this application Vm spec based on the context it is used
func (m *ApplicationVMSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnv(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationVMSpec) contextValidateEnv(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Env); i++ {

		if m.Env[i] != nil {
			if err := m.Env[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("env" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("env" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationVMSpec) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.Network != nil {
		if err := m.Network.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationVMSpec) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationVMSpec) contextValidateStorages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Storages); i++ {

		if m.Storages[i] != nil {
			if err := m.Storages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationVMSpec) contextValidateVMUsage(ctx context.Context, formats strfmt.Registry) error {

	if m.VMUsage != nil {
		if err := m.VMUsage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmUsage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmUsage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationVMSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationVMSpec) UnmarshalBinary(b []byte) error {
	var res ApplicationVMSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
