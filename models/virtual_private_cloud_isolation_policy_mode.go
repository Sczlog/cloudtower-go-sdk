// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VirtualPrivateCloudIsolationPolicyMode virtual private cloud isolation policy mode
//
// swagger:model VirtualPrivateCloudIsolationPolicyMode
type VirtualPrivateCloudIsolationPolicyMode string

func NewVirtualPrivateCloudIsolationPolicyMode(value VirtualPrivateCloudIsolationPolicyMode) *VirtualPrivateCloudIsolationPolicyMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VirtualPrivateCloudIsolationPolicyMode.
func (m VirtualPrivateCloudIsolationPolicyMode) Pointer() *VirtualPrivateCloudIsolationPolicyMode {
	return &m
}

const (

	// VirtualPrivateCloudIsolationPolicyModeALL captures enum value "ALL"
	VirtualPrivateCloudIsolationPolicyModeALL VirtualPrivateCloudIsolationPolicyMode = "ALL"

	// VirtualPrivateCloudIsolationPolicyModePARTIAL captures enum value "PARTIAL"
	VirtualPrivateCloudIsolationPolicyModePARTIAL VirtualPrivateCloudIsolationPolicyMode = "PARTIAL"
)

// for schema
var virtualPrivateCloudIsolationPolicyModeEnum []interface{}

func init() {
	var res []VirtualPrivateCloudIsolationPolicyMode
	if err := json.Unmarshal([]byte(`["ALL","PARTIAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualPrivateCloudIsolationPolicyModeEnum = append(virtualPrivateCloudIsolationPolicyModeEnum, v)
	}
}

func (m VirtualPrivateCloudIsolationPolicyMode) validateVirtualPrivateCloudIsolationPolicyModeEnum(path, location string, value VirtualPrivateCloudIsolationPolicyMode) error {
	if err := validate.EnumCase(path, location, value, virtualPrivateCloudIsolationPolicyModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this virtual private cloud isolation policy mode
func (m VirtualPrivateCloudIsolationPolicyMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVirtualPrivateCloudIsolationPolicyModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this virtual private cloud isolation policy mode based on context it is used
func (m VirtualPrivateCloudIsolationPolicyMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
