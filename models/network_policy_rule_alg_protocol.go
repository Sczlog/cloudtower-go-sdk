// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NetworkPolicyRuleAlgProtocol network policy rule alg protocol
//
// swagger:model NetworkPolicyRuleAlgProtocol
type NetworkPolicyRuleAlgProtocol string

func NewNetworkPolicyRuleAlgProtocol(value NetworkPolicyRuleAlgProtocol) *NetworkPolicyRuleAlgProtocol {
	return &value
}

// Pointer returns a pointer to a freshly-allocated NetworkPolicyRuleAlgProtocol.
func (m NetworkPolicyRuleAlgProtocol) Pointer() *NetworkPolicyRuleAlgProtocol {
	return &m
}

const (

	// NetworkPolicyRuleAlgProtocolFTP captures enum value "FTP"
	NetworkPolicyRuleAlgProtocolFTP NetworkPolicyRuleAlgProtocol = "FTP"

	// NetworkPolicyRuleAlgProtocolTFTP captures enum value "TFTP"
	NetworkPolicyRuleAlgProtocolTFTP NetworkPolicyRuleAlgProtocol = "TFTP"
)

// for schema
var networkPolicyRuleAlgProtocolEnum []interface{}

func init() {
	var res []NetworkPolicyRuleAlgProtocol
	if err := json.Unmarshal([]byte(`["FTP","TFTP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkPolicyRuleAlgProtocolEnum = append(networkPolicyRuleAlgProtocolEnum, v)
	}
}

func (m NetworkPolicyRuleAlgProtocol) validateNetworkPolicyRuleAlgProtocolEnum(path, location string, value NetworkPolicyRuleAlgProtocol) error {
	if err := validate.EnumCase(path, location, value, networkPolicyRuleAlgProtocolEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this network policy rule alg protocol
func (m NetworkPolicyRuleAlgProtocol) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNetworkPolicyRuleAlgProtocolEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this network policy rule alg protocol based on context it is used
func (m NetworkPolicyRuleAlgProtocol) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
