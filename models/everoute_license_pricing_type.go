// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EverouteLicensePricingType everoute license pricing type
//
// swagger:model EverouteLicensePricingType
type EverouteLicensePricingType string

func NewEverouteLicensePricingType(value EverouteLicensePricingType) *EverouteLicensePricingType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EverouteLicensePricingType.
func (m EverouteLicensePricingType) Pointer() *EverouteLicensePricingType {
	return &m
}

const (

	// EverouteLicensePricingTypeCPUSLOTNUM captures enum value "CPU_SLOT_NUM"
	EverouteLicensePricingTypeCPUSLOTNUM EverouteLicensePricingType = "CPU_SLOT_NUM"

	// EverouteLicensePricingTypeVMNUM captures enum value "VM_NUM"
	EverouteLicensePricingTypeVMNUM EverouteLicensePricingType = "VM_NUM"
)

// for schema
var everouteLicensePricingTypeEnum []interface{}

func init() {
	var res []EverouteLicensePricingType
	if err := json.Unmarshal([]byte(`["CPU_SLOT_NUM","VM_NUM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		everouteLicensePricingTypeEnum = append(everouteLicensePricingTypeEnum, v)
	}
}

func (m EverouteLicensePricingType) validateEverouteLicensePricingTypeEnum(path, location string, value EverouteLicensePricingType) error {
	if err := validate.EnumCase(path, location, value, everouteLicensePricingTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this everoute license pricing type
func (m EverouteLicensePricingType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEverouteLicensePricingTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this everoute license pricing type based on context it is used
func (m EverouteLicensePricingType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
