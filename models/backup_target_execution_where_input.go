// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupTargetExecutionWhereInput backup target execution where input
//
// swagger:model BackupTargetExecutionWhereInput
type BackupTargetExecutionWhereInput struct {

	// a n d
	AND []*BackupTargetExecutionWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*BackupTargetExecutionWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*BackupTargetExecutionWhereInput `json:"OR,omitempty"`

	// backup group
	BackupGroup *string `json:"backup_group,omitempty"`

	// backup group contains
	BackupGroupContains *string `json:"backup_group_contains,omitempty"`

	// backup group ends with
	BackupGroupEndsWith *string `json:"backup_group_ends_with,omitempty"`

	// backup group gt
	BackupGroupGt *string `json:"backup_group_gt,omitempty"`

	// backup group gte
	BackupGroupGte *string `json:"backup_group_gte,omitempty"`

	// backup group in
	BackupGroupIn []string `json:"backup_group_in,omitempty"`

	// backup group lt
	BackupGroupLt *string `json:"backup_group_lt,omitempty"`

	// backup group lte
	BackupGroupLte *string `json:"backup_group_lte,omitempty"`

	// backup group not
	BackupGroupNot *string `json:"backup_group_not,omitempty"`

	// backup group not contains
	BackupGroupNotContains *string `json:"backup_group_not_contains,omitempty"`

	// backup group not ends with
	BackupGroupNotEndsWith *string `json:"backup_group_not_ends_with,omitempty"`

	// backup group not in
	BackupGroupNotIn []string `json:"backup_group_not_in,omitempty"`

	// backup group not starts with
	BackupGroupNotStartsWith *string `json:"backup_group_not_starts_with,omitempty"`

	// backup group starts with
	BackupGroupStartsWith *string `json:"backup_group_starts_with,omitempty"`

	// backup plan execution
	BackupPlanExecution *BackupPlanExecutionWhereInput `json:"backup_plan_execution,omitempty"`

	// backup restore point
	BackupRestorePoint *BackupRestorePointWhereInput `json:"backup_restore_point,omitempty"`

	// cluster local id
	ClusterLocalID *string `json:"cluster_local_id,omitempty"`

	// cluster local id contains
	ClusterLocalIDContains *string `json:"cluster_local_id_contains,omitempty"`

	// cluster local id ends with
	ClusterLocalIDEndsWith *string `json:"cluster_local_id_ends_with,omitempty"`

	// cluster local id gt
	ClusterLocalIDGt *string `json:"cluster_local_id_gt,omitempty"`

	// cluster local id gte
	ClusterLocalIDGte *string `json:"cluster_local_id_gte,omitempty"`

	// cluster local id in
	ClusterLocalIDIn []string `json:"cluster_local_id_in,omitempty"`

	// cluster local id lt
	ClusterLocalIDLt *string `json:"cluster_local_id_lt,omitempty"`

	// cluster local id lte
	ClusterLocalIDLte *string `json:"cluster_local_id_lte,omitempty"`

	// cluster local id not
	ClusterLocalIDNot *string `json:"cluster_local_id_not,omitempty"`

	// cluster local id not contains
	ClusterLocalIDNotContains *string `json:"cluster_local_id_not_contains,omitempty"`

	// cluster local id not ends with
	ClusterLocalIDNotEndsWith *string `json:"cluster_local_id_not_ends_with,omitempty"`

	// cluster local id not in
	ClusterLocalIDNotIn []string `json:"cluster_local_id_not_in,omitempty"`

	// cluster local id not starts with
	ClusterLocalIDNotStartsWith *string `json:"cluster_local_id_not_starts_with,omitempty"`

	// cluster local id starts with
	ClusterLocalIDStartsWith *string `json:"cluster_local_id_starts_with,omitempty"`

	// duration
	Duration *int32 `json:"duration,omitempty"`

	// duration gt
	DurationGt *int32 `json:"duration_gt,omitempty"`

	// duration gte
	DurationGte *int32 `json:"duration_gte,omitempty"`

	// duration in
	DurationIn []int32 `json:"duration_in,omitempty"`

	// duration lt
	DurationLt *int32 `json:"duration_lt,omitempty"`

	// duration lte
	DurationLte *int32 `json:"duration_lte,omitempty"`

	// duration not
	DurationNot *int32 `json:"duration_not,omitempty"`

	// duration not in
	DurationNotIn []int32 `json:"duration_not_in,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// executed at
	ExecutedAt *string `json:"executed_at,omitempty"`

	// executed at gt
	ExecutedAtGt *string `json:"executed_at_gt,omitempty"`

	// executed at gte
	ExecutedAtGte *string `json:"executed_at_gte,omitempty"`

	// executed at in
	ExecutedAtIn []string `json:"executed_at_in,omitempty"`

	// executed at lt
	ExecutedAtLt *string `json:"executed_at_lt,omitempty"`

	// executed at lte
	ExecutedAtLte *string `json:"executed_at_lte,omitempty"`

	// executed at not
	ExecutedAtNot *string `json:"executed_at_not,omitempty"`

	// executed at not in
	ExecutedAtNotIn []string `json:"executed_at_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// parent backup
	ParentBackup *string `json:"parent_backup,omitempty"`

	// parent backup contains
	ParentBackupContains *string `json:"parent_backup_contains,omitempty"`

	// parent backup ends with
	ParentBackupEndsWith *string `json:"parent_backup_ends_with,omitempty"`

	// parent backup gt
	ParentBackupGt *string `json:"parent_backup_gt,omitempty"`

	// parent backup gte
	ParentBackupGte *string `json:"parent_backup_gte,omitempty"`

	// parent backup in
	ParentBackupIn []string `json:"parent_backup_in,omitempty"`

	// parent backup lt
	ParentBackupLt *string `json:"parent_backup_lt,omitempty"`

	// parent backup lte
	ParentBackupLte *string `json:"parent_backup_lte,omitempty"`

	// parent backup not
	ParentBackupNot *string `json:"parent_backup_not,omitempty"`

	// parent backup not contains
	ParentBackupNotContains *string `json:"parent_backup_not_contains,omitempty"`

	// parent backup not ends with
	ParentBackupNotEndsWith *string `json:"parent_backup_not_ends_with,omitempty"`

	// parent backup not in
	ParentBackupNotIn []string `json:"parent_backup_not_in,omitempty"`

	// parent backup not starts with
	ParentBackupNotStartsWith *string `json:"parent_backup_not_starts_with,omitempty"`

	// parent backup starts with
	ParentBackupStartsWith *string `json:"parent_backup_starts_with,omitempty"`

	// read bytes
	ReadBytes *int64 `json:"read_bytes,omitempty"`

	// read bytes gt
	ReadBytesGt *int64 `json:"read_bytes_gt,omitempty"`

	// read bytes gte
	ReadBytesGte *int64 `json:"read_bytes_gte,omitempty"`

	// read bytes in
	ReadBytesIn []int64 `json:"read_bytes_in,omitempty"`

	// read bytes lt
	ReadBytesLt *int64 `json:"read_bytes_lt,omitempty"`

	// read bytes lte
	ReadBytesLte *int64 `json:"read_bytes_lte,omitempty"`

	// read bytes not
	ReadBytesNot *int64 `json:"read_bytes_not,omitempty"`

	// read bytes not in
	ReadBytesNotIn []int64 `json:"read_bytes_not_in,omitempty"`

	// retry times
	RetryTimes *int32 `json:"retry_times,omitempty"`

	// retry times gt
	RetryTimesGt *int32 `json:"retry_times_gt,omitempty"`

	// retry times gte
	RetryTimesGte *int32 `json:"retry_times_gte,omitempty"`

	// retry times in
	RetryTimesIn []int32 `json:"retry_times_in,omitempty"`

	// retry times lt
	RetryTimesLt *int32 `json:"retry_times_lt,omitempty"`

	// retry times lte
	RetryTimesLte *int32 `json:"retry_times_lte,omitempty"`

	// retry times not
	RetryTimesNot *int32 `json:"retry_times_not,omitempty"`

	// retry times not in
	RetryTimesNotIn []int32 `json:"retry_times_not_in,omitempty"`

	// status
	Status *BackupExecutionStatus `json:"status,omitempty"`

	// status in
	StatusIn []BackupExecutionStatus `json:"status_in,omitempty"`

	// status not
	StatusNot *BackupExecutionStatus `json:"status_not,omitempty"`

	// status not in
	StatusNotIn []BackupExecutionStatus `json:"status_not_in,omitempty"`

	// total bytes
	TotalBytes *int64 `json:"total_bytes,omitempty"`

	// total bytes gt
	TotalBytesGt *int64 `json:"total_bytes_gt,omitempty"`

	// total bytes gte
	TotalBytesGte *int64 `json:"total_bytes_gte,omitempty"`

	// total bytes in
	TotalBytesIn []int64 `json:"total_bytes_in,omitempty"`

	// total bytes lt
	TotalBytesLt *int64 `json:"total_bytes_lt,omitempty"`

	// total bytes lte
	TotalBytesLte *int64 `json:"total_bytes_lte,omitempty"`

	// total bytes not
	TotalBytesNot *int64 `json:"total_bytes_not,omitempty"`

	// total bytes not in
	TotalBytesNotIn []int64 `json:"total_bytes_not_in,omitempty"`

	// type
	Type *BackupExecutionType `json:"type,omitempty"`

	// type in
	TypeIn []BackupExecutionType `json:"type_in,omitempty"`

	// type not
	TypeNot *BackupExecutionType `json:"type_not,omitempty"`

	// type not in
	TypeNotIn []BackupExecutionType `json:"type_not_in,omitempty"`

	// vm
	VM *VMWhereInput `json:"vm,omitempty"`

	// vm local id
	VMLocalID *string `json:"vm_local_id,omitempty"`

	// vm local id contains
	VMLocalIDContains *string `json:"vm_local_id_contains,omitempty"`

	// vm local id ends with
	VMLocalIDEndsWith *string `json:"vm_local_id_ends_with,omitempty"`

	// vm local id gt
	VMLocalIDGt *string `json:"vm_local_id_gt,omitempty"`

	// vm local id gte
	VMLocalIDGte *string `json:"vm_local_id_gte,omitempty"`

	// vm local id in
	VMLocalIDIn []string `json:"vm_local_id_in,omitempty"`

	// vm local id lt
	VMLocalIDLt *string `json:"vm_local_id_lt,omitempty"`

	// vm local id lte
	VMLocalIDLte *string `json:"vm_local_id_lte,omitempty"`

	// vm local id not
	VMLocalIDNot *string `json:"vm_local_id_not,omitempty"`

	// vm local id not contains
	VMLocalIDNotContains *string `json:"vm_local_id_not_contains,omitempty"`

	// vm local id not ends with
	VMLocalIDNotEndsWith *string `json:"vm_local_id_not_ends_with,omitempty"`

	// vm local id not in
	VMLocalIDNotIn []string `json:"vm_local_id_not_in,omitempty"`

	// vm local id not starts with
	VMLocalIDNotStartsWith *string `json:"vm_local_id_not_starts_with,omitempty"`

	// vm local id starts with
	VMLocalIDStartsWith *string `json:"vm_local_id_starts_with,omitempty"`

	// vm name
	VMName *string `json:"vm_name,omitempty"`

	// vm name contains
	VMNameContains *string `json:"vm_name_contains,omitempty"`

	// vm name ends with
	VMNameEndsWith *string `json:"vm_name_ends_with,omitempty"`

	// vm name gt
	VMNameGt *string `json:"vm_name_gt,omitempty"`

	// vm name gte
	VMNameGte *string `json:"vm_name_gte,omitempty"`

	// vm name in
	VMNameIn []string `json:"vm_name_in,omitempty"`

	// vm name lt
	VMNameLt *string `json:"vm_name_lt,omitempty"`

	// vm name lte
	VMNameLte *string `json:"vm_name_lte,omitempty"`

	// vm name not
	VMNameNot *string `json:"vm_name_not,omitempty"`

	// vm name not contains
	VMNameNotContains *string `json:"vm_name_not_contains,omitempty"`

	// vm name not ends with
	VMNameNotEndsWith *string `json:"vm_name_not_ends_with,omitempty"`

	// vm name not in
	VMNameNotIn []string `json:"vm_name_not_in,omitempty"`

	// vm name not starts with
	VMNameNotStartsWith *string `json:"vm_name_not_starts_with,omitempty"`

	// vm name starts with
	VMNameStartsWith *string `json:"vm_name_starts_with,omitempty"`
}

// Validate validates this backup target execution where input
func (m *BackupTargetExecutionWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupPlanExecution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupRestorePoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVM(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupTargetExecutionWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateBackupPlanExecution(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupPlanExecution) { // not required
		return nil
	}

	if m.BackupPlanExecution != nil {
		if err := m.BackupPlanExecution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_plan_execution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_plan_execution")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateBackupRestorePoint(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRestorePoint) { // not required
		return nil
	}

	if m.BackupRestorePoint != nil {
		if err := m.BackupRestorePoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_point")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_point")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNot) { // not required
		return nil
	}

	if m.StatusNot != nil {
		if err := m.StatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNot) { // not required
		return nil
	}

	if m.TypeNot != nil {
		if err := m.TypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateVM(formats strfmt.Registry) error {
	if swag.IsZero(m.VM) { // not required
		return nil
	}

	if m.VM != nil {
		if err := m.VM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup target execution where input based on the context it is used
func (m *BackupTargetExecutionWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupPlanExecution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupRestorePoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateBackupPlanExecution(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupPlanExecution != nil {
		if err := m.BackupPlanExecution.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_plan_execution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_plan_execution")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateBackupRestorePoint(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupRestorePoint != nil {
		if err := m.BackupRestorePoint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_point")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_point")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusNot != nil {
		if err := m.StatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeNot != nil {
		if err := m.TypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateVM(ctx context.Context, formats strfmt.Registry) error {

	if m.VM != nil {
		if err := m.VM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupTargetExecutionWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupTargetExecutionWhereInput) UnmarshalBinary(b []byte) error {
	var res BackupTargetExecutionWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
