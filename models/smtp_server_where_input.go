// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SMTPServerWhereInput Smtp server where input
//
// swagger:model SmtpServerWhereInput
type SMTPServerWhereInput struct {

	// a n d
	AND []*SMTPServerWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*SMTPServerWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*SMTPServerWhereInput `json:"OR,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// host
	Host *string `json:"host,omitempty"`

	// host contains
	HostContains *string `json:"host_contains,omitempty"`

	// host ends with
	HostEndsWith *string `json:"host_ends_with,omitempty"`

	// host gt
	HostGt *string `json:"host_gt,omitempty"`

	// host gte
	HostGte *string `json:"host_gte,omitempty"`

	// host in
	HostIn []string `json:"host_in,omitempty"`

	// host lt
	HostLt *string `json:"host_lt,omitempty"`

	// host lte
	HostLte *string `json:"host_lte,omitempty"`

	// host not
	HostNot *string `json:"host_not,omitempty"`

	// host not contains
	HostNotContains *string `json:"host_not_contains,omitempty"`

	// host not ends with
	HostNotEndsWith *string `json:"host_not_ends_with,omitempty"`

	// host not in
	HostNotIn []string `json:"host_not_in,omitempty"`

	// host not starts with
	HostNotStartsWith *string `json:"host_not_starts_with,omitempty"`

	// host starts with
	HostStartsWith *string `json:"host_starts_with,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// is record password
	IsRecordPassword *bool `json:"is_record_password,omitempty"`

	// is record password not
	IsRecordPasswordNot *bool `json:"is_record_password_not,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// password
	Password *string `json:"password,omitempty"`

	// password contains
	PasswordContains *string `json:"password_contains,omitempty"`

	// password ends with
	PasswordEndsWith *string `json:"password_ends_with,omitempty"`

	// password gt
	PasswordGt *string `json:"password_gt,omitempty"`

	// password gte
	PasswordGte *string `json:"password_gte,omitempty"`

	// password in
	PasswordIn []string `json:"password_in,omitempty"`

	// password lt
	PasswordLt *string `json:"password_lt,omitempty"`

	// password lte
	PasswordLte *string `json:"password_lte,omitempty"`

	// password not
	PasswordNot *string `json:"password_not,omitempty"`

	// password not contains
	PasswordNotContains *string `json:"password_not_contains,omitempty"`

	// password not ends with
	PasswordNotEndsWith *string `json:"password_not_ends_with,omitempty"`

	// password not in
	PasswordNotIn []string `json:"password_not_in,omitempty"`

	// password not starts with
	PasswordNotStartsWith *string `json:"password_not_starts_with,omitempty"`

	// password starts with
	PasswordStartsWith *string `json:"password_starts_with,omitempty"`

	// port
	Port *int32 `json:"port,omitempty"`

	// port gt
	PortGt *int32 `json:"port_gt,omitempty"`

	// port gte
	PortGte *int32 `json:"port_gte,omitempty"`

	// port in
	PortIn []int32 `json:"port_in,omitempty"`

	// port lt
	PortLt *int32 `json:"port_lt,omitempty"`

	// port lte
	PortLte *int32 `json:"port_lte,omitempty"`

	// port not
	PortNot *int32 `json:"port_not,omitempty"`

	// port not in
	PortNotIn []int32 `json:"port_not_in,omitempty"`

	// secure mode
	SecureMode *SMTPSecureMode `json:"secure_mode,omitempty"`

	// secure mode in
	SecureModeIn []SMTPSecureMode `json:"secure_mode_in,omitempty"`

	// secure mode not
	SecureModeNot *SMTPSecureMode `json:"secure_mode_not,omitempty"`

	// secure mode not in
	SecureModeNotIn []SMTPSecureMode `json:"secure_mode_not_in,omitempty"`

	// username
	Username *string `json:"username,omitempty"`

	// username contains
	UsernameContains *string `json:"username_contains,omitempty"`

	// username ends with
	UsernameEndsWith *string `json:"username_ends_with,omitempty"`

	// username gt
	UsernameGt *string `json:"username_gt,omitempty"`

	// username gte
	UsernameGte *string `json:"username_gte,omitempty"`

	// username in
	UsernameIn []string `json:"username_in,omitempty"`

	// username lt
	UsernameLt *string `json:"username_lt,omitempty"`

	// username lte
	UsernameLte *string `json:"username_lte,omitempty"`

	// username not
	UsernameNot *string `json:"username_not,omitempty"`

	// username not contains
	UsernameNotContains *string `json:"username_not_contains,omitempty"`

	// username not ends with
	UsernameNotEndsWith *string `json:"username_not_ends_with,omitempty"`

	// username not in
	UsernameNotIn []string `json:"username_not_in,omitempty"`

	// username not starts with
	UsernameNotStartsWith *string `json:"username_not_starts_with,omitempty"`

	// username starts with
	UsernameStartsWith *string `json:"username_starts_with,omitempty"`
}

// Validate validates this Smtp server where input
func (m *SMTPServerWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecureMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecureModeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecureModeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecureModeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SMTPServerWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SMTPServerWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SMTPServerWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SMTPServerWhereInput) validateSecureMode(formats strfmt.Registry) error {
	if swag.IsZero(m.SecureMode) { // not required
		return nil
	}

	if m.SecureMode != nil {
		if err := m.SecureMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secure_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secure_mode")
			}
			return err
		}
	}

	return nil
}

func (m *SMTPServerWhereInput) validateSecureModeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SecureModeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SecureModeIn); i++ {

		if err := m.SecureModeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secure_mode_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secure_mode_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SMTPServerWhereInput) validateSecureModeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.SecureModeNot) { // not required
		return nil
	}

	if m.SecureModeNot != nil {
		if err := m.SecureModeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secure_mode_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secure_mode_not")
			}
			return err
		}
	}

	return nil
}

func (m *SMTPServerWhereInput) validateSecureModeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SecureModeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SecureModeNotIn); i++ {

		if err := m.SecureModeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secure_mode_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secure_mode_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this Smtp server where input based on the context it is used
func (m *SMTPServerWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecureMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecureModeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecureModeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecureModeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SMTPServerWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SMTPServerWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SMTPServerWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SMTPServerWhereInput) contextValidateSecureMode(ctx context.Context, formats strfmt.Registry) error {

	if m.SecureMode != nil {
		if err := m.SecureMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secure_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secure_mode")
			}
			return err
		}
	}

	return nil
}

func (m *SMTPServerWhereInput) contextValidateSecureModeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SecureModeIn); i++ {

		if err := m.SecureModeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secure_mode_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secure_mode_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SMTPServerWhereInput) contextValidateSecureModeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.SecureModeNot != nil {
		if err := m.SecureModeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secure_mode_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secure_mode_not")
			}
			return err
		}
	}

	return nil
}

func (m *SMTPServerWhereInput) contextValidateSecureModeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SecureModeNotIn); i++ {

		if err := m.SecureModeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secure_mode_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secure_mode_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SMTPServerWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SMTPServerWhereInput) UnmarshalBinary(b []byte) error {
	var res SMTPServerWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
