// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StoreTransportType store transport type
//
// swagger:model StoreTransportType
type StoreTransportType string

func NewStoreTransportType(value StoreTransportType) *StoreTransportType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated StoreTransportType.
func (m StoreTransportType) Pointer() *StoreTransportType {
	return &m
}

const (

	// StoreTransportTypeRDMA captures enum value "RDMA"
	StoreTransportTypeRDMA StoreTransportType = "RDMA"

	// StoreTransportTypeTCP captures enum value "TCP"
	StoreTransportTypeTCP StoreTransportType = "TCP"
)

// for schema
var storeTransportTypeEnum []interface{}

func init() {
	var res []StoreTransportType
	if err := json.Unmarshal([]byte(`["RDMA","TCP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storeTransportTypeEnum = append(storeTransportTypeEnum, v)
	}
}

func (m StoreTransportType) validateStoreTransportTypeEnum(path, location string, value StoreTransportType) error {
	if err := validate.EnumCase(path, location, value, storeTransportTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this store transport type
func (m StoreTransportType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStoreTransportTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this store transport type based on context it is used
func (m StoreTransportType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
