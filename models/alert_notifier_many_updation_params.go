// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AlertNotifierManyUpdationParams alert notifier many updation params
//
// swagger:model AlertNotifierManyUpdationParams
type AlertNotifierManyUpdationParams struct {

	// disabled
	Disabled *bool `json:"disabled,omitempty"`

	// email from
	EmailFrom *string `json:"email_from,omitempty"`

	// email tos
	EmailTos []string `json:"email_tos,omitempty"`

	// language code
	LanguageCode *NotifierLanguageCode `json:"language_code,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// notice severities
	NoticeSeverities []string `json:"notice_severities,omitempty"`

	// smtp server id
	SMTPServerID *string `json:"smtp_server_id,omitempty"`

	// where
	// Required: true
	Where *AlertNotifierWhereInput `json:"where"`
}

// Validate validates this alert notifier many updation params
func (m *AlertNotifierManyUpdationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLanguageCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoticeSeverities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhere(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertNotifierManyUpdationParams) validateLanguageCode(formats strfmt.Registry) error {
	if swag.IsZero(m.LanguageCode) { // not required
		return nil
	}

	if m.LanguageCode != nil {
		if err := m.LanguageCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language_code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("language_code")
			}
			return err
		}
	}

	return nil
}

var alertNotifierManyUpdationParamsNoticeSeveritiesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CRITICAL","NOTICE","INFO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		alertNotifierManyUpdationParamsNoticeSeveritiesItemsEnum = append(alertNotifierManyUpdationParamsNoticeSeveritiesItemsEnum, v)
	}
}

func (m *AlertNotifierManyUpdationParams) validateNoticeSeveritiesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, alertNotifierManyUpdationParamsNoticeSeveritiesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AlertNotifierManyUpdationParams) validateNoticeSeverities(formats strfmt.Registry) error {
	if swag.IsZero(m.NoticeSeverities) { // not required
		return nil
	}

	for i := 0; i < len(m.NoticeSeverities); i++ {

		// value enum
		if err := m.validateNoticeSeveritiesItemsEnum("notice_severities"+"."+strconv.Itoa(i), "body", m.NoticeSeverities[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *AlertNotifierManyUpdationParams) validateWhere(formats strfmt.Registry) error {

	if err := validate.Required("where", "body", m.Where); err != nil {
		return err
	}

	if m.Where != nil {
		if err := m.Where.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this alert notifier many updation params based on the context it is used
func (m *AlertNotifierManyUpdationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLanguageCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWhere(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertNotifierManyUpdationParams) contextValidateLanguageCode(ctx context.Context, formats strfmt.Registry) error {

	if m.LanguageCode != nil {
		if err := m.LanguageCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language_code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("language_code")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierManyUpdationParams) contextValidateWhere(ctx context.Context, formats strfmt.Registry) error {

	if m.Where != nil {
		if err := m.Where.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertNotifierManyUpdationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertNotifierManyUpdationParams) UnmarshalBinary(b []byte) error {
	var res AlertNotifierManyUpdationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
