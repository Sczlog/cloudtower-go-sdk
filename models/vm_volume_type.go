// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VMVolumeType Vm volume type
//
// swagger:model VmVolumeType
type VMVolumeType string

func NewVMVolumeType(value VMVolumeType) *VMVolumeType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VMVolumeType.
func (m VMVolumeType) Pointer() *VMVolumeType {
	return &m
}

const (

	// VMVolumeTypeKVMVOLUME captures enum value "KVM_VOLUME"
	VMVolumeTypeKVMVOLUME VMVolumeType = "KVM_VOLUME"

	// VMVolumeTypeKVMVOLUMEISCSI captures enum value "KVM_VOLUME_ISCSI"
	VMVolumeTypeKVMVOLUMEISCSI VMVolumeType = "KVM_VOLUME_ISCSI"
)

// for schema
var vmVolumeTypeEnum []interface{}

func init() {
	var res []VMVolumeType
	if err := json.Unmarshal([]byte(`["KVM_VOLUME","KVM_VOLUME_ISCSI"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmVolumeTypeEnum = append(vmVolumeTypeEnum, v)
	}
}

func (m VMVolumeType) validateVMVolumeTypeEnum(path, location string, value VMVolumeType) error {
	if err := validate.EnumCase(path, location, value, vmVolumeTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Vm volume type
func (m VMVolumeType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVMVolumeTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this Vm volume type based on context it is used
func (m VMVolumeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
