// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MaintenanceModeEnum maintenance mode enum
//
// swagger:model MaintenanceModeEnum
type MaintenanceModeEnum string

func NewMaintenanceModeEnum(value MaintenanceModeEnum) *MaintenanceModeEnum {
	return &value
}

// Pointer returns a pointer to a freshly-allocated MaintenanceModeEnum.
func (m MaintenanceModeEnum) Pointer() *MaintenanceModeEnum {
	return &m
}

const (

	// MaintenanceModeEnumENTERINGMAINTENANCEMODE captures enum value "ENTERING_MAINTENANCE_MODE"
	MaintenanceModeEnumENTERINGMAINTENANCEMODE MaintenanceModeEnum = "ENTERING_MAINTENANCE_MODE"

	// MaintenanceModeEnumINUSE captures enum value "IN_USE"
	MaintenanceModeEnumINUSE MaintenanceModeEnum = "IN_USE"

	// MaintenanceModeEnumMAINTENANCEMODE captures enum value "MAINTENANCE_MODE"
	MaintenanceModeEnumMAINTENANCEMODE MaintenanceModeEnum = "MAINTENANCE_MODE"

	// MaintenanceModeEnumREMOVING captures enum value "REMOVING"
	MaintenanceModeEnumREMOVING MaintenanceModeEnum = "REMOVING"
)

// for schema
var maintenanceModeEnumEnum []interface{}

func init() {
	var res []MaintenanceModeEnum
	if err := json.Unmarshal([]byte(`["ENTERING_MAINTENANCE_MODE","IN_USE","MAINTENANCE_MODE","REMOVING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		maintenanceModeEnumEnum = append(maintenanceModeEnumEnum, v)
	}
}

func (m MaintenanceModeEnum) validateMaintenanceModeEnumEnum(path, location string, value MaintenanceModeEnum) error {
	if err := validate.EnumCase(path, location, value, maintenanceModeEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this maintenance mode enum
func (m MaintenanceModeEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMaintenanceModeEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this maintenance mode enum based on context it is used
func (m MaintenanceModeEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
