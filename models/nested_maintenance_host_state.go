// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedMaintenanceHostState nested maintenance host state
//
// swagger:model NestedMaintenanceHostState
type NestedMaintenanceHostState struct {

	// enter maintenance time
	// Required: true
	EnterMaintenanceTime *string `json:"enter_maintenance_time"`

	// maintenance job id
	// Required: true
	MaintenanceJobID *string `json:"maintenance_job_id"`

	// state
	// Required: true
	State *MaintenanceModeEnum `json:"state"`
}

// Validate validates this nested maintenance host state
func (m *NestedMaintenanceHostState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnterMaintenanceTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaintenanceJobID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedMaintenanceHostState) validateEnterMaintenanceTime(formats strfmt.Registry) error {

	if err := validate.Required("enter_maintenance_time", "body", m.EnterMaintenanceTime); err != nil {
		return err
	}

	return nil
}

func (m *NestedMaintenanceHostState) validateMaintenanceJobID(formats strfmt.Registry) error {

	if err := validate.Required("maintenance_job_id", "body", m.MaintenanceJobID); err != nil {
		return err
	}

	return nil
}

func (m *NestedMaintenanceHostState) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nested maintenance host state based on the context it is used
func (m *NestedMaintenanceHostState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedMaintenanceHostState) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {
		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NestedMaintenanceHostState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedMaintenanceHostState) UnmarshalBinary(b []byte) error {
	var res NestedMaintenanceHostState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
