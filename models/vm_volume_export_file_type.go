// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VMVolumeExportFileType Vm volume export file type
//
// swagger:model VmVolumeExportFileType
type VMVolumeExportFileType string

func NewVMVolumeExportFileType(value VMVolumeExportFileType) *VMVolumeExportFileType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VMVolumeExportFileType.
func (m VMVolumeExportFileType) Pointer() *VMVolumeExportFileType {
	return &m
}

const (

	// VMVolumeExportFileTypeQCOW2 captures enum value "QCOW2"
	VMVolumeExportFileTypeQCOW2 VMVolumeExportFileType = "QCOW2"

	// VMVolumeExportFileTypeRAW captures enum value "RAW"
	VMVolumeExportFileTypeRAW VMVolumeExportFileType = "RAW"
)

// for schema
var vmVolumeExportFileTypeEnum []interface{}

func init() {
	var res []VMVolumeExportFileType
	if err := json.Unmarshal([]byte(`["QCOW2","RAW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmVolumeExportFileTypeEnum = append(vmVolumeExportFileTypeEnum, v)
	}
}

func (m VMVolumeExportFileType) validateVMVolumeExportFileTypeEnum(path, location string, value VMVolumeExportFileType) error {
	if err := validate.EnumCase(path, location, value, vmVolumeExportFileTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Vm volume export file type
func (m VMVolumeExportFileType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVMVolumeExportFileTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this Vm volume export file type based on context it is used
func (m VMVolumeExportFileType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
