// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ZoneWhereInput zone where input
//
// swagger:model ZoneWhereInput
type ZoneWhereInput struct {

	// a n d
	AND []*ZoneWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*ZoneWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*ZoneWhereInput `json:"OR,omitempty"`

	// cluster
	Cluster *ClusterWhereInput `json:"cluster,omitempty"`

	// datacenter
	Datacenter *DatacenterWhereInput `json:"datacenter,omitempty"`

	// failure data space
	FailureDataSpace *int64 `json:"failure_data_space,omitempty"`

	// failure data space gt
	FailureDataSpaceGt *int64 `json:"failure_data_space_gt,omitempty"`

	// failure data space gte
	FailureDataSpaceGte *int64 `json:"failure_data_space_gte,omitempty"`

	// failure data space in
	FailureDataSpaceIn []int64 `json:"failure_data_space_in,omitempty"`

	// failure data space lt
	FailureDataSpaceLt *int64 `json:"failure_data_space_lt,omitempty"`

	// failure data space lte
	FailureDataSpaceLte *int64 `json:"failure_data_space_lte,omitempty"`

	// failure data space not
	FailureDataSpaceNot *int64 `json:"failure_data_space_not,omitempty"`

	// failure data space not in
	FailureDataSpaceNotIn []int64 `json:"failure_data_space_not_in,omitempty"`

	// host num
	HostNum *int32 `json:"host_num,omitempty"`

	// host num gt
	HostNumGt *int32 `json:"host_num_gt,omitempty"`

	// host num gte
	HostNumGte *int32 `json:"host_num_gte,omitempty"`

	// host num in
	HostNumIn []int32 `json:"host_num_in,omitempty"`

	// host num lt
	HostNumLt *int32 `json:"host_num_lt,omitempty"`

	// host num lte
	HostNumLte *int32 `json:"host_num_lte,omitempty"`

	// host num not
	HostNumNot *int32 `json:"host_num_not,omitempty"`

	// host num not in
	HostNumNotIn []int32 `json:"host_num_not_in,omitempty"`

	// hosts every
	HostsEvery *HostWhereInput `json:"hosts_every,omitempty"`

	// hosts none
	HostsNone *HostWhereInput `json:"hosts_none,omitempty"`

	// hosts some
	HostsSome *HostWhereInput `json:"hosts_some,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// is preferred
	IsPreferred *bool `json:"is_preferred,omitempty"`

	// is preferred not
	IsPreferredNot *bool `json:"is_preferred_not,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// provisioned cpu cores
	ProvisionedCPUCores *int32 `json:"provisioned_cpu_cores,omitempty"`

	// provisioned cpu cores for active vm
	ProvisionedCPUCoresForActiveVM *int32 `json:"provisioned_cpu_cores_for_active_vm,omitempty"`

	// provisioned cpu cores for active vm gt
	ProvisionedCPUCoresForActiveVMGt *int32 `json:"provisioned_cpu_cores_for_active_vm_gt,omitempty"`

	// provisioned cpu cores for active vm gte
	ProvisionedCPUCoresForActiveVMGte *int32 `json:"provisioned_cpu_cores_for_active_vm_gte,omitempty"`

	// provisioned cpu cores for active vm in
	ProvisionedCPUCoresForActiveVMIn []int32 `json:"provisioned_cpu_cores_for_active_vm_in,omitempty"`

	// provisioned cpu cores for active vm lt
	ProvisionedCPUCoresForActiveVMLt *int32 `json:"provisioned_cpu_cores_for_active_vm_lt,omitempty"`

	// provisioned cpu cores for active vm lte
	ProvisionedCPUCoresForActiveVMLte *int32 `json:"provisioned_cpu_cores_for_active_vm_lte,omitempty"`

	// provisioned cpu cores for active vm not
	ProvisionedCPUCoresForActiveVMNot *int32 `json:"provisioned_cpu_cores_for_active_vm_not,omitempty"`

	// provisioned cpu cores for active vm not in
	ProvisionedCPUCoresForActiveVMNotIn []int32 `json:"provisioned_cpu_cores_for_active_vm_not_in,omitempty"`

	// provisioned cpu cores gt
	ProvisionedCPUCoresGt *int32 `json:"provisioned_cpu_cores_gt,omitempty"`

	// provisioned cpu cores gte
	ProvisionedCPUCoresGte *int32 `json:"provisioned_cpu_cores_gte,omitempty"`

	// provisioned cpu cores in
	ProvisionedCPUCoresIn []int32 `json:"provisioned_cpu_cores_in,omitempty"`

	// provisioned cpu cores lt
	ProvisionedCPUCoresLt *int32 `json:"provisioned_cpu_cores_lt,omitempty"`

	// provisioned cpu cores lte
	ProvisionedCPUCoresLte *int32 `json:"provisioned_cpu_cores_lte,omitempty"`

	// provisioned cpu cores not
	ProvisionedCPUCoresNot *int32 `json:"provisioned_cpu_cores_not,omitempty"`

	// provisioned cpu cores not in
	ProvisionedCPUCoresNotIn []int32 `json:"provisioned_cpu_cores_not_in,omitempty"`

	// provisioned data space
	ProvisionedDataSpace *int64 `json:"provisioned_data_space,omitempty"`

	// provisioned data space gt
	ProvisionedDataSpaceGt *int64 `json:"provisioned_data_space_gt,omitempty"`

	// provisioned data space gte
	ProvisionedDataSpaceGte *int64 `json:"provisioned_data_space_gte,omitempty"`

	// provisioned data space in
	ProvisionedDataSpaceIn []int64 `json:"provisioned_data_space_in,omitempty"`

	// provisioned data space lt
	ProvisionedDataSpaceLt *int64 `json:"provisioned_data_space_lt,omitempty"`

	// provisioned data space lte
	ProvisionedDataSpaceLte *int64 `json:"provisioned_data_space_lte,omitempty"`

	// provisioned data space not
	ProvisionedDataSpaceNot *int64 `json:"provisioned_data_space_not,omitempty"`

	// provisioned data space not in
	ProvisionedDataSpaceNotIn []int64 `json:"provisioned_data_space_not_in,omitempty"`

	// provisioned memory bytes
	ProvisionedMemoryBytes *int64 `json:"provisioned_memory_bytes,omitempty"`

	// provisioned memory bytes gt
	ProvisionedMemoryBytesGt *int64 `json:"provisioned_memory_bytes_gt,omitempty"`

	// provisioned memory bytes gte
	ProvisionedMemoryBytesGte *int64 `json:"provisioned_memory_bytes_gte,omitempty"`

	// provisioned memory bytes in
	ProvisionedMemoryBytesIn []int64 `json:"provisioned_memory_bytes_in,omitempty"`

	// provisioned memory bytes lt
	ProvisionedMemoryBytesLt *int64 `json:"provisioned_memory_bytes_lt,omitempty"`

	// provisioned memory bytes lte
	ProvisionedMemoryBytesLte *int64 `json:"provisioned_memory_bytes_lte,omitempty"`

	// provisioned memory bytes not
	ProvisionedMemoryBytesNot *int64 `json:"provisioned_memory_bytes_not,omitempty"`

	// provisioned memory bytes not in
	ProvisionedMemoryBytesNotIn []int64 `json:"provisioned_memory_bytes_not_in,omitempty"`

	// running vm num
	RunningVMNum *int32 `json:"running_vm_num,omitempty"`

	// running vm num gt
	RunningVMNumGt *int32 `json:"running_vm_num_gt,omitempty"`

	// running vm num gte
	RunningVMNumGte *int32 `json:"running_vm_num_gte,omitempty"`

	// running vm num in
	RunningVMNumIn []int32 `json:"running_vm_num_in,omitempty"`

	// running vm num lt
	RunningVMNumLt *int32 `json:"running_vm_num_lt,omitempty"`

	// running vm num lte
	RunningVMNumLte *int32 `json:"running_vm_num_lte,omitempty"`

	// running vm num not
	RunningVMNumNot *int32 `json:"running_vm_num_not,omitempty"`

	// running vm num not in
	RunningVMNumNotIn []int32 `json:"running_vm_num_not_in,omitempty"`

	// stopped vm num
	StoppedVMNum *int32 `json:"stopped_vm_num,omitempty"`

	// stopped vm num gt
	StoppedVMNumGt *int32 `json:"stopped_vm_num_gt,omitempty"`

	// stopped vm num gte
	StoppedVMNumGte *int32 `json:"stopped_vm_num_gte,omitempty"`

	// stopped vm num in
	StoppedVMNumIn []int32 `json:"stopped_vm_num_in,omitempty"`

	// stopped vm num lt
	StoppedVMNumLt *int32 `json:"stopped_vm_num_lt,omitempty"`

	// stopped vm num lte
	StoppedVMNumLte *int32 `json:"stopped_vm_num_lte,omitempty"`

	// stopped vm num not
	StoppedVMNumNot *int32 `json:"stopped_vm_num_not,omitempty"`

	// stopped vm num not in
	StoppedVMNumNotIn []int32 `json:"stopped_vm_num_not_in,omitempty"`

	// suspended vm num
	SuspendedVMNum *int32 `json:"suspended_vm_num,omitempty"`

	// suspended vm num gt
	SuspendedVMNumGt *int32 `json:"suspended_vm_num_gt,omitempty"`

	// suspended vm num gte
	SuspendedVMNumGte *int32 `json:"suspended_vm_num_gte,omitempty"`

	// suspended vm num in
	SuspendedVMNumIn []int32 `json:"suspended_vm_num_in,omitempty"`

	// suspended vm num lt
	SuspendedVMNumLt *int32 `json:"suspended_vm_num_lt,omitempty"`

	// suspended vm num lte
	SuspendedVMNumLte *int32 `json:"suspended_vm_num_lte,omitempty"`

	// suspended vm num not
	SuspendedVMNumNot *int32 `json:"suspended_vm_num_not,omitempty"`

	// suspended vm num not in
	SuspendedVMNumNotIn []int32 `json:"suspended_vm_num_not_in,omitempty"`

	// total cache capacity
	TotalCacheCapacity *int64 `json:"total_cache_capacity,omitempty"`

	// total cache capacity gt
	TotalCacheCapacityGt *int64 `json:"total_cache_capacity_gt,omitempty"`

	// total cache capacity gte
	TotalCacheCapacityGte *int64 `json:"total_cache_capacity_gte,omitempty"`

	// total cache capacity in
	TotalCacheCapacityIn []int64 `json:"total_cache_capacity_in,omitempty"`

	// total cache capacity lt
	TotalCacheCapacityLt *int64 `json:"total_cache_capacity_lt,omitempty"`

	// total cache capacity lte
	TotalCacheCapacityLte *int64 `json:"total_cache_capacity_lte,omitempty"`

	// total cache capacity not
	TotalCacheCapacityNot *int64 `json:"total_cache_capacity_not,omitempty"`

	// total cache capacity not in
	TotalCacheCapacityNotIn []int64 `json:"total_cache_capacity_not_in,omitempty"`

	// total cpu cores
	TotalCPUCores *int32 `json:"total_cpu_cores,omitempty"`

	// total cpu cores gt
	TotalCPUCoresGt *int32 `json:"total_cpu_cores_gt,omitempty"`

	// total cpu cores gte
	TotalCPUCoresGte *int32 `json:"total_cpu_cores_gte,omitempty"`

	// total cpu cores in
	TotalCPUCoresIn []int32 `json:"total_cpu_cores_in,omitempty"`

	// total cpu cores lt
	TotalCPUCoresLt *int32 `json:"total_cpu_cores_lt,omitempty"`

	// total cpu cores lte
	TotalCPUCoresLte *int32 `json:"total_cpu_cores_lte,omitempty"`

	// total cpu cores not
	TotalCPUCoresNot *int32 `json:"total_cpu_cores_not,omitempty"`

	// total cpu cores not in
	TotalCPUCoresNotIn []int32 `json:"total_cpu_cores_not_in,omitempty"`

	// total cpu hz
	TotalCPUHz *int64 `json:"total_cpu_hz,omitempty"`

	// total cpu hz gt
	TotalCPUHzGt *int64 `json:"total_cpu_hz_gt,omitempty"`

	// total cpu hz gte
	TotalCPUHzGte *int64 `json:"total_cpu_hz_gte,omitempty"`

	// total cpu hz in
	TotalCPUHzIn []int64 `json:"total_cpu_hz_in,omitempty"`

	// total cpu hz lt
	TotalCPUHzLt *int64 `json:"total_cpu_hz_lt,omitempty"`

	// total cpu hz lte
	TotalCPUHzLte *int64 `json:"total_cpu_hz_lte,omitempty"`

	// total cpu hz not
	TotalCPUHzNot *int64 `json:"total_cpu_hz_not,omitempty"`

	// total cpu hz not in
	TotalCPUHzNotIn []int64 `json:"total_cpu_hz_not_in,omitempty"`

	// total data capacity
	TotalDataCapacity *int64 `json:"total_data_capacity,omitempty"`

	// total data capacity gt
	TotalDataCapacityGt *int64 `json:"total_data_capacity_gt,omitempty"`

	// total data capacity gte
	TotalDataCapacityGte *int64 `json:"total_data_capacity_gte,omitempty"`

	// total data capacity in
	TotalDataCapacityIn []int64 `json:"total_data_capacity_in,omitempty"`

	// total data capacity lt
	TotalDataCapacityLt *int64 `json:"total_data_capacity_lt,omitempty"`

	// total data capacity lte
	TotalDataCapacityLte *int64 `json:"total_data_capacity_lte,omitempty"`

	// total data capacity not
	TotalDataCapacityNot *int64 `json:"total_data_capacity_not,omitempty"`

	// total data capacity not in
	TotalDataCapacityNotIn []int64 `json:"total_data_capacity_not_in,omitempty"`

	// total memory bytes
	TotalMemoryBytes *int64 `json:"total_memory_bytes,omitempty"`

	// total memory bytes gt
	TotalMemoryBytesGt *int64 `json:"total_memory_bytes_gt,omitempty"`

	// total memory bytes gte
	TotalMemoryBytesGte *int64 `json:"total_memory_bytes_gte,omitempty"`

	// total memory bytes in
	TotalMemoryBytesIn []int64 `json:"total_memory_bytes_in,omitempty"`

	// total memory bytes lt
	TotalMemoryBytesLt *int64 `json:"total_memory_bytes_lt,omitempty"`

	// total memory bytes lte
	TotalMemoryBytesLte *int64 `json:"total_memory_bytes_lte,omitempty"`

	// total memory bytes not
	TotalMemoryBytesNot *int64 `json:"total_memory_bytes_not,omitempty"`

	// total memory bytes not in
	TotalMemoryBytesNotIn []int64 `json:"total_memory_bytes_not_in,omitempty"`

	// used data space
	UsedDataSpace *int64 `json:"used_data_space,omitempty"`

	// used data space gt
	UsedDataSpaceGt *int64 `json:"used_data_space_gt,omitempty"`

	// used data space gte
	UsedDataSpaceGte *int64 `json:"used_data_space_gte,omitempty"`

	// used data space in
	UsedDataSpaceIn []int64 `json:"used_data_space_in,omitempty"`

	// used data space lt
	UsedDataSpaceLt *int64 `json:"used_data_space_lt,omitempty"`

	// used data space lte
	UsedDataSpaceLte *int64 `json:"used_data_space_lte,omitempty"`

	// used data space not
	UsedDataSpaceNot *int64 `json:"used_data_space_not,omitempty"`

	// used data space not in
	UsedDataSpaceNotIn []int64 `json:"used_data_space_not_in,omitempty"`

	// valid data space
	ValidDataSpace *int64 `json:"valid_data_space,omitempty"`

	// valid data space gt
	ValidDataSpaceGt *int64 `json:"valid_data_space_gt,omitempty"`

	// valid data space gte
	ValidDataSpaceGte *int64 `json:"valid_data_space_gte,omitempty"`

	// valid data space in
	ValidDataSpaceIn []int64 `json:"valid_data_space_in,omitempty"`

	// valid data space lt
	ValidDataSpaceLt *int64 `json:"valid_data_space_lt,omitempty"`

	// valid data space lte
	ValidDataSpaceLte *int64 `json:"valid_data_space_lte,omitempty"`

	// valid data space not
	ValidDataSpaceNot *int64 `json:"valid_data_space_not,omitempty"`

	// valid data space not in
	ValidDataSpaceNotIn []int64 `json:"valid_data_space_not_in,omitempty"`

	// vm num
	VMNum *int32 `json:"vm_num,omitempty"`

	// vm num gt
	VMNumGt *int32 `json:"vm_num_gt,omitempty"`

	// vm num gte
	VMNumGte *int32 `json:"vm_num_gte,omitempty"`

	// vm num in
	VMNumIn []int32 `json:"vm_num_in,omitempty"`

	// vm num lt
	VMNumLt *int32 `json:"vm_num_lt,omitempty"`

	// vm num lte
	VMNumLte *int32 `json:"vm_num_lte,omitempty"`

	// vm num not
	VMNumNot *int32 `json:"vm_num_not,omitempty"`

	// vm num not in
	VMNumNotIn []int32 `json:"vm_num_not_in,omitempty"`
}

// Validate validates this zone where input
func (m *ZoneWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatacenter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostsSome(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ZoneWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ZoneWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ZoneWhereInput) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneWhereInput) validateDatacenter(formats strfmt.Registry) error {
	if swag.IsZero(m.Datacenter) { // not required
		return nil
	}

	if m.Datacenter != nil {
		if err := m.Datacenter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datacenter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datacenter")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneWhereInput) validateHostsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.HostsEvery) { // not required
		return nil
	}

	if m.HostsEvery != nil {
		if err := m.HostsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_every")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneWhereInput) validateHostsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.HostsNone) { // not required
		return nil
	}

	if m.HostsNone != nil {
		if err := m.HostsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_none")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneWhereInput) validateHostsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.HostsSome) { // not required
		return nil
	}

	if m.HostsSome != nil {
		if err := m.HostsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_some")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this zone where input based on the context it is used
func (m *ZoneWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatacenter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ZoneWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ZoneWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ZoneWhereInput) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneWhereInput) contextValidateDatacenter(ctx context.Context, formats strfmt.Registry) error {

	if m.Datacenter != nil {
		if err := m.Datacenter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datacenter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datacenter")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneWhereInput) contextValidateHostsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.HostsEvery != nil {
		if err := m.HostsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_every")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneWhereInput) contextValidateHostsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.HostsNone != nil {
		if err := m.HostsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_none")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneWhereInput) contextValidateHostsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.HostsSome != nil {
		if err := m.HostsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_some")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ZoneWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZoneWhereInput) UnmarshalBinary(b []byte) error {
	var res ZoneWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
