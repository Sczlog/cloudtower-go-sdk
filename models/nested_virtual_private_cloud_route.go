// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedVirtualPrivateCloudRoute nested virtual private cloud route
//
// swagger:model NestedVirtualPrivateCloudRoute
type NestedVirtualPrivateCloudRoute struct {

	// destination
	// Required: true
	Destination *string `json:"destination"`

	// id
	// Required: true
	ID *string `json:"id"`

	// next hop local id
	// Required: true
	NextHopLocalID *string `json:"next_hop_local_id"`

	// next hop type
	// Required: true
	NextHopType *VirtualPrivateCloudRouteNextHopType `json:"next_hop_type"`
}

// Validate validates this nested virtual private cloud route
func (m *NestedVirtualPrivateCloudRoute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextHopLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextHopType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedVirtualPrivateCloudRoute) validateDestination(formats strfmt.Registry) error {

	if err := validate.Required("destination", "body", m.Destination); err != nil {
		return err
	}

	return nil
}

func (m *NestedVirtualPrivateCloudRoute) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *NestedVirtualPrivateCloudRoute) validateNextHopLocalID(formats strfmt.Registry) error {

	if err := validate.Required("next_hop_local_id", "body", m.NextHopLocalID); err != nil {
		return err
	}

	return nil
}

func (m *NestedVirtualPrivateCloudRoute) validateNextHopType(formats strfmt.Registry) error {

	if err := validate.Required("next_hop_type", "body", m.NextHopType); err != nil {
		return err
	}

	if err := validate.Required("next_hop_type", "body", m.NextHopType); err != nil {
		return err
	}

	if m.NextHopType != nil {
		if err := m.NextHopType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("next_hop_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("next_hop_type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nested virtual private cloud route based on the context it is used
func (m *NestedVirtualPrivateCloudRoute) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNextHopType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedVirtualPrivateCloudRoute) contextValidateNextHopType(ctx context.Context, formats strfmt.Registry) error {

	if m.NextHopType != nil {
		if err := m.NextHopType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("next_hop_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("next_hop_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NestedVirtualPrivateCloudRoute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedVirtualPrivateCloudRoute) UnmarshalBinary(b []byte) error {
	var res NestedVirtualPrivateCloudRoute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
