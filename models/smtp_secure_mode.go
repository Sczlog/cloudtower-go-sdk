// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SMTPSecureMode Smtp secure mode
//
// swagger:model SmtpSecureMode
type SMTPSecureMode string

func NewSMTPSecureMode(value SMTPSecureMode) *SMTPSecureMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SMTPSecureMode.
func (m SMTPSecureMode) Pointer() *SMTPSecureMode {
	return &m
}

const (

	// SMTPSecureModeSSL captures enum value "SSL"
	SMTPSecureModeSSL SMTPSecureMode = "SSL"

	// SMTPSecureModeSTARTTLS captures enum value "STARTTLS"
	SMTPSecureModeSTARTTLS SMTPSecureMode = "STARTTLS"

	// SMTPSecureModeUNSPECIFIED captures enum value "UNSPECIFIED"
	SMTPSecureModeUNSPECIFIED SMTPSecureMode = "UNSPECIFIED"
)

// for schema
var smtpSecureModeEnum []interface{}

func init() {
	var res []SMTPSecureMode
	if err := json.Unmarshal([]byte(`["SSL","STARTTLS","UNSPECIFIED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smtpSecureModeEnum = append(smtpSecureModeEnum, v)
	}
}

func (m SMTPSecureMode) validateSMTPSecureModeEnum(path, location string, value SMTPSecureMode) error {
	if err := validate.EnumCase(path, location, value, smtpSecureModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Smtp secure mode
func (m SMTPSecureMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSMTPSecureModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this Smtp secure mode based on context it is used
func (m SMTPSecureMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
