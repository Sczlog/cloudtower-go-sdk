// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetZoneMetricInput get zone metric input
//
// swagger:model GetZoneMetricInput
type GetZoneMetricInput struct {

	// clusters
	// Required: true
	Clusters *ClusterWhereInput `json:"clusters"`

	// metrics
	// Required: true
	Metrics []string `json:"metrics"`

	// range
	// Required: true
	Range *string `json:"range"`

	// type
	// Required: true
	// Enum: [primary-to-secondary secondary-to-primary]
	Type string `json:"type"`
}

// Validate validates this get zone metric input
func (m *GetZoneMetricInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetZoneMetricInput) validateClusters(formats strfmt.Registry) error {

	if err := validate.Required("clusters", "body", m.Clusters); err != nil {
		return err
	}

	if m.Clusters != nil {
		if err := m.Clusters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters")
			}
			return err
		}
	}

	return nil
}

func (m *GetZoneMetricInput) validateMetrics(formats strfmt.Registry) error {

	if err := validate.Required("metrics", "body", m.Metrics); err != nil {
		return err
	}

	return nil
}

func (m *GetZoneMetricInput) validateRange(formats strfmt.Registry) error {

	if err := validate.Required("range", "body", m.Range); err != nil {
		return err
	}

	return nil
}

var getZoneMetricInputTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["primary-to-secondary","secondary-to-primary"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getZoneMetricInputTypeTypePropEnum = append(getZoneMetricInputTypeTypePropEnum, v)
	}
}

const (

	// GetZoneMetricInputTypePrimaryDashToDashSecondary captures enum value "primary-to-secondary"
	GetZoneMetricInputTypePrimaryDashToDashSecondary string = "primary-to-secondary"

	// GetZoneMetricInputTypeSecondaryDashToDashPrimary captures enum value "secondary-to-primary"
	GetZoneMetricInputTypeSecondaryDashToDashPrimary string = "secondary-to-primary"
)

// prop value enum
func (m *GetZoneMetricInput) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getZoneMetricInputTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GetZoneMetricInput) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get zone metric input based on the context it is used
func (m *GetZoneMetricInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetZoneMetricInput) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	if m.Clusters != nil {
		if err := m.Clusters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetZoneMetricInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetZoneMetricInput) UnmarshalBinary(b []byte) error {
	var res GetZoneMetricInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
