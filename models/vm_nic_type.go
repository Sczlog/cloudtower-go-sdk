// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VMNicType Vm nic type
//
// swagger:model VmNicType
type VMNicType string

func NewVMNicType(value VMNicType) *VMNicType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VMNicType.
func (m VMNicType) Pointer() *VMNicType {
	return &m
}

const (

	// VMNicTypeVLAN captures enum value "VLAN"
	VMNicTypeVLAN VMNicType = "VLAN"

	// VMNicTypeVPC captures enum value "VPC"
	VMNicTypeVPC VMNicType = "VPC"
)

// for schema
var vmNicTypeEnum []interface{}

func init() {
	var res []VMNicType
	if err := json.Unmarshal([]byte(`["VLAN","VPC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmNicTypeEnum = append(vmNicTypeEnum, v)
	}
}

func (m VMNicType) validateVMNicTypeEnum(path, location string, value VMNicType) error {
	if err := validate.EnumCase(path, location, value, vmNicTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Vm nic type
func (m VMNicType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVMNicTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this Vm nic type based on context it is used
func (m VMNicType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
