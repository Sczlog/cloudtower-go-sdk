// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CloudTowerApplicationPackageWhereInput cloud tower application package where input
//
// swagger:model CloudTowerApplicationPackageWhereInput
type CloudTowerApplicationPackageWhereInput struct {

	// a n d
	AND []*CloudTowerApplicationPackageWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*CloudTowerApplicationPackageWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*CloudTowerApplicationPackageWhereInput `json:"OR,omitempty"`

	// applications every
	ApplicationsEvery *CloudTowerApplicationWhereInput `json:"applications_every,omitempty"`

	// applications none
	ApplicationsNone *CloudTowerApplicationWhereInput `json:"applications_none,omitempty"`

	// applications some
	ApplicationsSome *CloudTowerApplicationWhereInput `json:"applications_some,omitempty"`

	// architecture
	Architecture *Architecture `json:"architecture,omitempty"`

	// architecture in
	ArchitectureIn []Architecture `json:"architecture_in,omitempty"`

	// architecture not
	ArchitectureNot *Architecture `json:"architecture_not,omitempty"`

	// architecture not in
	ArchitectureNotIn []Architecture `json:"architecture_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// scos version
	ScosVersion *string `json:"scosVersion,omitempty"`

	// scos version contains
	ScosVersionContains *string `json:"scosVersion_contains,omitempty"`

	// scos version ends with
	ScosVersionEndsWith *string `json:"scosVersion_ends_with,omitempty"`

	// scos version gt
	ScosVersionGt *string `json:"scosVersion_gt,omitempty"`

	// scos version gte
	ScosVersionGte *string `json:"scosVersion_gte,omitempty"`

	// scos version in
	ScosVersionIn []string `json:"scosVersion_in,omitempty"`

	// scos version lt
	ScosVersionLt *string `json:"scosVersion_lt,omitempty"`

	// scos version lte
	ScosVersionLte *string `json:"scosVersion_lte,omitempty"`

	// scos version not
	ScosVersionNot *string `json:"scosVersion_not,omitempty"`

	// scos version not contains
	ScosVersionNotContains *string `json:"scosVersion_not_contains,omitempty"`

	// scos version not ends with
	ScosVersionNotEndsWith *string `json:"scosVersion_not_ends_with,omitempty"`

	// scos version not in
	ScosVersionNotIn []string `json:"scosVersion_not_in,omitempty"`

	// scos version not starts with
	ScosVersionNotStartsWith *string `json:"scosVersion_not_starts_with,omitempty"`

	// scos version starts with
	ScosVersionStartsWith *string `json:"scosVersion_starts_with,omitempty"`

	// version
	Version *string `json:"version,omitempty"`

	// version contains
	VersionContains *string `json:"version_contains,omitempty"`

	// version ends with
	VersionEndsWith *string `json:"version_ends_with,omitempty"`

	// version gt
	VersionGt *string `json:"version_gt,omitempty"`

	// version gte
	VersionGte *string `json:"version_gte,omitempty"`

	// version in
	VersionIn []string `json:"version_in,omitempty"`

	// version lt
	VersionLt *string `json:"version_lt,omitempty"`

	// version lte
	VersionLte *string `json:"version_lte,omitempty"`

	// version not
	VersionNot *string `json:"version_not,omitempty"`

	// version not contains
	VersionNotContains *string `json:"version_not_contains,omitempty"`

	// version not ends with
	VersionNotEndsWith *string `json:"version_not_ends_with,omitempty"`

	// version not in
	VersionNotIn []string `json:"version_not_in,omitempty"`

	// version not starts with
	VersionNotStartsWith *string `json:"version_not_starts_with,omitempty"`

	// version starts with
	VersionStartsWith *string `json:"version_starts_with,omitempty"`
}

// Validate validates this cloud tower application package where input
func (m *CloudTowerApplicationPackageWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchitectureIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchitectureNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchitectureNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudTowerApplicationPackageWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloudTowerApplicationPackageWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloudTowerApplicationPackageWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloudTowerApplicationPackageWhereInput) validateApplicationsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationsEvery) { // not required
		return nil
	}

	if m.ApplicationsEvery != nil {
		if err := m.ApplicationsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applications_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applications_every")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplicationPackageWhereInput) validateApplicationsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationsNone) { // not required
		return nil
	}

	if m.ApplicationsNone != nil {
		if err := m.ApplicationsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applications_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applications_none")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplicationPackageWhereInput) validateApplicationsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationsSome) { // not required
		return nil
	}

	if m.ApplicationsSome != nil {
		if err := m.ApplicationsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applications_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applications_some")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplicationPackageWhereInput) validateArchitecture(formats strfmt.Registry) error {
	if swag.IsZero(m.Architecture) { // not required
		return nil
	}

	if m.Architecture != nil {
		if err := m.Architecture.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("architecture")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplicationPackageWhereInput) validateArchitectureIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchitectureIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ArchitectureIn); i++ {

		if err := m.ArchitectureIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("architecture_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *CloudTowerApplicationPackageWhereInput) validateArchitectureNot(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchitectureNot) { // not required
		return nil
	}

	if m.ArchitectureNot != nil {
		if err := m.ArchitectureNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("architecture_not")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplicationPackageWhereInput) validateArchitectureNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchitectureNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ArchitectureNotIn); i++ {

		if err := m.ArchitectureNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("architecture_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this cloud tower application package where input based on the context it is used
func (m *CloudTowerApplicationPackageWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateApplicationsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateApplicationsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateApplicationsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchitecture(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchitectureIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchitectureNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchitectureNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudTowerApplicationPackageWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloudTowerApplicationPackageWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloudTowerApplicationPackageWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloudTowerApplicationPackageWhereInput) contextValidateApplicationsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ApplicationsEvery != nil {
		if err := m.ApplicationsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applications_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applications_every")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplicationPackageWhereInput) contextValidateApplicationsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ApplicationsNone != nil {
		if err := m.ApplicationsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applications_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applications_none")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplicationPackageWhereInput) contextValidateApplicationsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ApplicationsSome != nil {
		if err := m.ApplicationsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applications_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applications_some")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplicationPackageWhereInput) contextValidateArchitecture(ctx context.Context, formats strfmt.Registry) error {

	if m.Architecture != nil {
		if err := m.Architecture.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("architecture")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplicationPackageWhereInput) contextValidateArchitectureIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ArchitectureIn); i++ {

		if err := m.ArchitectureIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("architecture_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *CloudTowerApplicationPackageWhereInput) contextValidateArchitectureNot(ctx context.Context, formats strfmt.Registry) error {

	if m.ArchitectureNot != nil {
		if err := m.ArchitectureNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("architecture_not")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplicationPackageWhereInput) contextValidateArchitectureNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ArchitectureNotIn); i++ {

		if err := m.ArchitectureNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("architecture_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudTowerApplicationPackageWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudTowerApplicationPackageWhereInput) UnmarshalBinary(b []byte) error {
	var res CloudTowerApplicationPackageWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
