// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudTowerApplicationPackage cloud tower application package
//
// swagger:model CloudTowerApplicationPackage
type CloudTowerApplicationPackage struct {

	// applications
	Applications []*NestedCloudTowerApplication `json:"applications,omitempty"`

	// architecture
	// Required: true
	Architecture *Architecture `json:"architecture"`

	// containers
	// Required: true
	Containers interface{} `json:"containers"`

	// id
	// Required: true
	ID *string `json:"id"`

	// images
	// Required: true
	Images interface{} `json:"images"`

	// name
	// Required: true
	Name *string `json:"name"`

	// scos version
	// Required: true
	ScosVersion *string `json:"scosVersion"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this cloud tower application package
func (m *CloudTowerApplicationPackage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScosVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudTowerApplicationPackage) validateApplications(formats strfmt.Registry) error {
	if swag.IsZero(m.Applications) { // not required
		return nil
	}

	for i := 0; i < len(m.Applications); i++ {
		if swag.IsZero(m.Applications[i]) { // not required
			continue
		}

		if m.Applications[i] != nil {
			if err := m.Applications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloudTowerApplicationPackage) validateArchitecture(formats strfmt.Registry) error {

	if err := validate.Required("architecture", "body", m.Architecture); err != nil {
		return err
	}

	if err := validate.Required("architecture", "body", m.Architecture); err != nil {
		return err
	}

	if m.Architecture != nil {
		if err := m.Architecture.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("architecture")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplicationPackage) validateContainers(formats strfmt.Registry) error {

	if m.Containers == nil {
		return errors.Required("containers", "body", nil)
	}

	return nil
}

func (m *CloudTowerApplicationPackage) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *CloudTowerApplicationPackage) validateImages(formats strfmt.Registry) error {

	if m.Images == nil {
		return errors.Required("images", "body", nil)
	}

	return nil
}

func (m *CloudTowerApplicationPackage) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CloudTowerApplicationPackage) validateScosVersion(formats strfmt.Registry) error {

	if err := validate.Required("scosVersion", "body", m.ScosVersion); err != nil {
		return err
	}

	return nil
}

func (m *CloudTowerApplicationPackage) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cloud tower application package based on the context it is used
func (m *CloudTowerApplicationPackage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchitecture(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudTowerApplicationPackage) contextValidateApplications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Applications); i++ {

		if m.Applications[i] != nil {
			if err := m.Applications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloudTowerApplicationPackage) contextValidateArchitecture(ctx context.Context, formats strfmt.Registry) error {

	if m.Architecture != nil {
		if err := m.Architecture.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("architecture")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudTowerApplicationPackage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudTowerApplicationPackage) UnmarshalBinary(b []byte) error {
	var res CloudTowerApplicationPackage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
