// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VlanModeType vlan mode type
//
// swagger:model VlanModeType
type VlanModeType string

func NewVlanModeType(value VlanModeType) *VlanModeType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VlanModeType.
func (m VlanModeType) Pointer() *VlanModeType {
	return &m
}

const (

	// VlanModeTypeGENEVE captures enum value "GENEVE"
	VlanModeTypeGENEVE VlanModeType = "GENEVE"

	// VlanModeTypeVLANACCESS captures enum value "VLAN_ACCESS"
	VlanModeTypeVLANACCESS VlanModeType = "VLAN_ACCESS"

	// VlanModeTypeVLANTRUNK captures enum value "VLAN_TRUNK"
	VlanModeTypeVLANTRUNK VlanModeType = "VLAN_TRUNK"

	// VlanModeTypeVXLAN captures enum value "VXLAN"
	VlanModeTypeVXLAN VlanModeType = "VXLAN"
)

// for schema
var vlanModeTypeEnum []interface{}

func init() {
	var res []VlanModeType
	if err := json.Unmarshal([]byte(`["GENEVE","VLAN_ACCESS","VLAN_TRUNK","VXLAN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vlanModeTypeEnum = append(vlanModeTypeEnum, v)
	}
}

func (m VlanModeType) validateVlanModeTypeEnum(path, location string, value VlanModeType) error {
	if err := validate.EnumCase(path, location, value, vlanModeTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this vlan mode type
func (m VlanModeType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVlanModeTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this vlan mode type based on context it is used
func (m VlanModeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
