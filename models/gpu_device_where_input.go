// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GpuDeviceWhereInput gpu device where input
//
// swagger:model GpuDeviceWhereInput
type GpuDeviceWhereInput struct {

	// a n d
	AND []*GpuDeviceWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*GpuDeviceWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*GpuDeviceWhereInput `json:"OR,omitempty"`

	// assigned vgpus num
	AssignedVgpusNum *int32 `json:"assigned_vgpus_num,omitempty"`

	// assigned vgpus num gt
	AssignedVgpusNumGt *int32 `json:"assigned_vgpus_num_gt,omitempty"`

	// assigned vgpus num gte
	AssignedVgpusNumGte *int32 `json:"assigned_vgpus_num_gte,omitempty"`

	// assigned vgpus num in
	AssignedVgpusNumIn []int32 `json:"assigned_vgpus_num_in,omitempty"`

	// assigned vgpus num lt
	AssignedVgpusNumLt *int32 `json:"assigned_vgpus_num_lt,omitempty"`

	// assigned vgpus num lte
	AssignedVgpusNumLte *int32 `json:"assigned_vgpus_num_lte,omitempty"`

	// assigned vgpus num not
	AssignedVgpusNumNot *int32 `json:"assigned_vgpus_num_not,omitempty"`

	// assigned vgpus num not in
	AssignedVgpusNumNotIn []int32 `json:"assigned_vgpus_num_not_in,omitempty"`

	// available vgpus num
	AvailableVgpusNum *int32 `json:"available_vgpus_num,omitempty"`

	// available vgpus num gt
	AvailableVgpusNumGt *int32 `json:"available_vgpus_num_gt,omitempty"`

	// available vgpus num gte
	AvailableVgpusNumGte *int32 `json:"available_vgpus_num_gte,omitempty"`

	// available vgpus num in
	AvailableVgpusNumIn []int32 `json:"available_vgpus_num_in,omitempty"`

	// available vgpus num lt
	AvailableVgpusNumLt *int32 `json:"available_vgpus_num_lt,omitempty"`

	// available vgpus num lte
	AvailableVgpusNumLte *int32 `json:"available_vgpus_num_lte,omitempty"`

	// available vgpus num not
	AvailableVgpusNumNot *int32 `json:"available_vgpus_num_not,omitempty"`

	// available vgpus num not in
	AvailableVgpusNumNotIn []int32 `json:"available_vgpus_num_not_in,omitempty"`

	// brand
	Brand *string `json:"brand,omitempty"`

	// brand contains
	BrandContains *string `json:"brand_contains,omitempty"`

	// brand ends with
	BrandEndsWith *string `json:"brand_ends_with,omitempty"`

	// brand gt
	BrandGt *string `json:"brand_gt,omitempty"`

	// brand gte
	BrandGte *string `json:"brand_gte,omitempty"`

	// brand in
	BrandIn []string `json:"brand_in,omitempty"`

	// brand lt
	BrandLt *string `json:"brand_lt,omitempty"`

	// brand lte
	BrandLte *string `json:"brand_lte,omitempty"`

	// brand not
	BrandNot *string `json:"brand_not,omitempty"`

	// brand not contains
	BrandNotContains *string `json:"brand_not_contains,omitempty"`

	// brand not ends with
	BrandNotEndsWith *string `json:"brand_not_ends_with,omitempty"`

	// brand not in
	BrandNotIn []string `json:"brand_not_in,omitempty"`

	// brand not starts with
	BrandNotStartsWith *string `json:"brand_not_starts_with,omitempty"`

	// brand starts with
	BrandStartsWith *string `json:"brand_starts_with,omitempty"`

	// bus location
	BusLocation *string `json:"bus_location,omitempty"`

	// bus location contains
	BusLocationContains *string `json:"bus_location_contains,omitempty"`

	// bus location ends with
	BusLocationEndsWith *string `json:"bus_location_ends_with,omitempty"`

	// bus location gt
	BusLocationGt *string `json:"bus_location_gt,omitempty"`

	// bus location gte
	BusLocationGte *string `json:"bus_location_gte,omitempty"`

	// bus location in
	BusLocationIn []string `json:"bus_location_in,omitempty"`

	// bus location lt
	BusLocationLt *string `json:"bus_location_lt,omitempty"`

	// bus location lte
	BusLocationLte *string `json:"bus_location_lte,omitempty"`

	// bus location not
	BusLocationNot *string `json:"bus_location_not,omitempty"`

	// bus location not contains
	BusLocationNotContains *string `json:"bus_location_not_contains,omitempty"`

	// bus location not ends with
	BusLocationNotEndsWith *string `json:"bus_location_not_ends_with,omitempty"`

	// bus location not in
	BusLocationNotIn []string `json:"bus_location_not_in,omitempty"`

	// bus location not starts with
	BusLocationNotStartsWith *string `json:"bus_location_not_starts_with,omitempty"`

	// bus location starts with
	BusLocationStartsWith *string `json:"bus_location_starts_with,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// host
	Host *HostWhereInput `json:"host,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// is nvidia tools ready
	IsNvidiaToolsReady *bool `json:"is_nvidia_tools_ready,omitempty"`

	// is nvidia tools ready not
	IsNvidiaToolsReadyNot *bool `json:"is_nvidia_tools_ready_not,omitempty"`

	// is nvidia vfs enabled
	IsNvidiaVfsEnabled *bool `json:"is_nvidia_vfs_enabled,omitempty"`

	// is nvidia vfs enabled not
	IsNvidiaVfsEnabledNot *bool `json:"is_nvidia_vfs_enabled_not,omitempty"`

	// is nvidia vfs supported
	IsNvidiaVfsSupported *bool `json:"is_nvidia_vfs_supported,omitempty"`

	// is nvidia vfs supported not
	IsNvidiaVfsSupportedNot *bool `json:"is_nvidia_vfs_supported_not,omitempty"`

	// labels every
	LabelsEvery *LabelWhereInput `json:"labels_every,omitempty"`

	// labels none
	LabelsNone *LabelWhereInput `json:"labels_none,omitempty"`

	// labels some
	LabelsSome *LabelWhereInput `json:"labels_some,omitempty"`

	// local created at
	LocalCreatedAt *string `json:"local_created_at,omitempty"`

	// local created at gt
	LocalCreatedAtGt *string `json:"local_created_at_gt,omitempty"`

	// local created at gte
	LocalCreatedAtGte *string `json:"local_created_at_gte,omitempty"`

	// local created at in
	LocalCreatedAtIn []string `json:"local_created_at_in,omitempty"`

	// local created at lt
	LocalCreatedAtLt *string `json:"local_created_at_lt,omitempty"`

	// local created at lte
	LocalCreatedAtLte *string `json:"local_created_at_lte,omitempty"`

	// local created at not
	LocalCreatedAtNot *string `json:"local_created_at_not,omitempty"`

	// local created at not in
	LocalCreatedAtNotIn []string `json:"local_created_at_not_in,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// model
	Model *string `json:"model,omitempty"`

	// model contains
	ModelContains *string `json:"model_contains,omitempty"`

	// model ends with
	ModelEndsWith *string `json:"model_ends_with,omitempty"`

	// model gt
	ModelGt *string `json:"model_gt,omitempty"`

	// model gte
	ModelGte *string `json:"model_gte,omitempty"`

	// model in
	ModelIn []string `json:"model_in,omitempty"`

	// model lt
	ModelLt *string `json:"model_lt,omitempty"`

	// model lte
	ModelLte *string `json:"model_lte,omitempty"`

	// model not
	ModelNot *string `json:"model_not,omitempty"`

	// model not contains
	ModelNotContains *string `json:"model_not_contains,omitempty"`

	// model not ends with
	ModelNotEndsWith *string `json:"model_not_ends_with,omitempty"`

	// model not in
	ModelNotIn []string `json:"model_not_in,omitempty"`

	// model not starts with
	ModelNotStartsWith *string `json:"model_not_starts_with,omitempty"`

	// model starts with
	ModelStartsWith *string `json:"model_starts_with,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// status
	Status *GpuDeviceStatus `json:"status,omitempty"`

	// status in
	StatusIn []GpuDeviceStatus `json:"status_in,omitempty"`

	// status not
	StatusNot *GpuDeviceStatus `json:"status_not,omitempty"`

	// status not in
	StatusNotIn []GpuDeviceStatus `json:"status_not_in,omitempty"`

	// user usage
	UserUsage *GpuDeviceUsage `json:"user_usage,omitempty"`

	// user usage in
	UserUsageIn []GpuDeviceUsage `json:"user_usage_in,omitempty"`

	// user usage not
	UserUsageNot *GpuDeviceUsage `json:"user_usage_not,omitempty"`

	// user usage not in
	UserUsageNotIn []GpuDeviceUsage `json:"user_usage_not_in,omitempty"`

	// user vgpu type id
	UserVgpuTypeID *string `json:"user_vgpu_type_id,omitempty"`

	// user vgpu type id contains
	UserVgpuTypeIDContains *string `json:"user_vgpu_type_id_contains,omitempty"`

	// user vgpu type id ends with
	UserVgpuTypeIDEndsWith *string `json:"user_vgpu_type_id_ends_with,omitempty"`

	// user vgpu type id gt
	UserVgpuTypeIDGt *string `json:"user_vgpu_type_id_gt,omitempty"`

	// user vgpu type id gte
	UserVgpuTypeIDGte *string `json:"user_vgpu_type_id_gte,omitempty"`

	// user vgpu type id in
	UserVgpuTypeIDIn []string `json:"user_vgpu_type_id_in,omitempty"`

	// user vgpu type id lt
	UserVgpuTypeIDLt *string `json:"user_vgpu_type_id_lt,omitempty"`

	// user vgpu type id lte
	UserVgpuTypeIDLte *string `json:"user_vgpu_type_id_lte,omitempty"`

	// user vgpu type id not
	UserVgpuTypeIDNot *string `json:"user_vgpu_type_id_not,omitempty"`

	// user vgpu type id not contains
	UserVgpuTypeIDNotContains *string `json:"user_vgpu_type_id_not_contains,omitempty"`

	// user vgpu type id not ends with
	UserVgpuTypeIDNotEndsWith *string `json:"user_vgpu_type_id_not_ends_with,omitempty"`

	// user vgpu type id not in
	UserVgpuTypeIDNotIn []string `json:"user_vgpu_type_id_not_in,omitempty"`

	// user vgpu type id not starts with
	UserVgpuTypeIDNotStartsWith *string `json:"user_vgpu_type_id_not_starts_with,omitempty"`

	// user vgpu type id starts with
	UserVgpuTypeIDStartsWith *string `json:"user_vgpu_type_id_starts_with,omitempty"`

	// user vgpu type name
	UserVgpuTypeName *string `json:"user_vgpu_type_name,omitempty"`

	// user vgpu type name contains
	UserVgpuTypeNameContains *string `json:"user_vgpu_type_name_contains,omitempty"`

	// user vgpu type name ends with
	UserVgpuTypeNameEndsWith *string `json:"user_vgpu_type_name_ends_with,omitempty"`

	// user vgpu type name gt
	UserVgpuTypeNameGt *string `json:"user_vgpu_type_name_gt,omitempty"`

	// user vgpu type name gte
	UserVgpuTypeNameGte *string `json:"user_vgpu_type_name_gte,omitempty"`

	// user vgpu type name in
	UserVgpuTypeNameIn []string `json:"user_vgpu_type_name_in,omitempty"`

	// user vgpu type name lt
	UserVgpuTypeNameLt *string `json:"user_vgpu_type_name_lt,omitempty"`

	// user vgpu type name lte
	UserVgpuTypeNameLte *string `json:"user_vgpu_type_name_lte,omitempty"`

	// user vgpu type name not
	UserVgpuTypeNameNot *string `json:"user_vgpu_type_name_not,omitempty"`

	// user vgpu type name not contains
	UserVgpuTypeNameNotContains *string `json:"user_vgpu_type_name_not_contains,omitempty"`

	// user vgpu type name not ends with
	UserVgpuTypeNameNotEndsWith *string `json:"user_vgpu_type_name_not_ends_with,omitempty"`

	// user vgpu type name not in
	UserVgpuTypeNameNotIn []string `json:"user_vgpu_type_name_not_in,omitempty"`

	// user vgpu type name not starts with
	UserVgpuTypeNameNotStartsWith *string `json:"user_vgpu_type_name_not_starts_with,omitempty"`

	// user vgpu type name starts with
	UserVgpuTypeNameStartsWith *string `json:"user_vgpu_type_name_starts_with,omitempty"`

	// vgpu instance num
	VgpuInstanceNum *int32 `json:"vgpu_instance_num,omitempty"`

	// vgpu instance num gt
	VgpuInstanceNumGt *int32 `json:"vgpu_instance_num_gt,omitempty"`

	// vgpu instance num gte
	VgpuInstanceNumGte *int32 `json:"vgpu_instance_num_gte,omitempty"`

	// vgpu instance num in
	VgpuInstanceNumIn []int32 `json:"vgpu_instance_num_in,omitempty"`

	// vgpu instance num lt
	VgpuInstanceNumLt *int32 `json:"vgpu_instance_num_lt,omitempty"`

	// vgpu instance num lte
	VgpuInstanceNumLte *int32 `json:"vgpu_instance_num_lte,omitempty"`

	// vgpu instance num not
	VgpuInstanceNumNot *int32 `json:"vgpu_instance_num_not,omitempty"`

	// vgpu instance num not in
	VgpuInstanceNumNotIn []int32 `json:"vgpu_instance_num_not_in,omitempty"`

	// vms every
	VmsEvery *VMWhereInput `json:"vms_every,omitempty"`

	// vms none
	VmsNone *VMWhereInput `json:"vms_none,omitempty"`

	// vms some
	VmsSome *VMWhereInput `json:"vms_some,omitempty"`
}

// Validate validates this gpu device where input
func (m *GpuDeviceWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUsage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUsageIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUsageNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUsageNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsSome(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GpuDeviceWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GpuDeviceWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GpuDeviceWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GpuDeviceWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GpuDeviceWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GpuDeviceWhereInput) validateHost(formats strfmt.Registry) error {
	if swag.IsZero(m.Host) { // not required
		return nil
	}

	if m.Host != nil {
		if err := m.Host.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) validateLabelsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsEvery) { // not required
		return nil
	}

	if m.LabelsEvery != nil {
		if err := m.LabelsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_every")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) validateLabelsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsNone) { // not required
		return nil
	}

	if m.LabelsNone != nil {
		if err := m.LabelsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_none")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) validateLabelsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsSome) { // not required
		return nil
	}

	if m.LabelsSome != nil {
		if err := m.LabelsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_some")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) validateStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GpuDeviceWhereInput) validateStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNot) { // not required
		return nil
	}

	if m.StatusNot != nil {
		if err := m.StatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) validateStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GpuDeviceWhereInput) validateUserUsage(formats strfmt.Registry) error {
	if swag.IsZero(m.UserUsage) { // not required
		return nil
	}

	if m.UserUsage != nil {
		if err := m.UserUsage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) validateUserUsageIn(formats strfmt.Registry) error {
	if swag.IsZero(m.UserUsageIn) { // not required
		return nil
	}

	for i := 0; i < len(m.UserUsageIn); i++ {

		if err := m.UserUsageIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GpuDeviceWhereInput) validateUserUsageNot(formats strfmt.Registry) error {
	if swag.IsZero(m.UserUsageNot) { // not required
		return nil
	}

	if m.UserUsageNot != nil {
		if err := m.UserUsageNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_not")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) validateUserUsageNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.UserUsageNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.UserUsageNotIn); i++ {

		if err := m.UserUsageNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GpuDeviceWhereInput) validateVmsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsEvery) { // not required
		return nil
	}

	if m.VmsEvery != nil {
		if err := m.VmsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_every")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) validateVmsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsNone) { // not required
		return nil
	}

	if m.VmsNone != nil {
		if err := m.VmsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_none")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) validateVmsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsSome) { // not required
		return nil
	}

	if m.VmsSome != nil {
		if err := m.VmsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_some")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this gpu device where input based on the context it is used
func (m *GpuDeviceWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserUsageIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserUsageNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserUsageNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GpuDeviceWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GpuDeviceWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GpuDeviceWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GpuDeviceWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GpuDeviceWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GpuDeviceWhereInput) contextValidateHost(ctx context.Context, formats strfmt.Registry) error {

	if m.Host != nil {
		if err := m.Host.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) contextValidateLabelsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsEvery != nil {
		if err := m.LabelsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_every")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) contextValidateLabelsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsNone != nil {
		if err := m.LabelsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_none")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) contextValidateLabelsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsSome != nil {
		if err := m.LabelsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_some")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) contextValidateStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GpuDeviceWhereInput) contextValidateStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusNot != nil {
		if err := m.StatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) contextValidateStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GpuDeviceWhereInput) contextValidateUserUsage(ctx context.Context, formats strfmt.Registry) error {

	if m.UserUsage != nil {
		if err := m.UserUsage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) contextValidateUserUsageIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserUsageIn); i++ {

		if err := m.UserUsageIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GpuDeviceWhereInput) contextValidateUserUsageNot(ctx context.Context, formats strfmt.Registry) error {

	if m.UserUsageNot != nil {
		if err := m.UserUsageNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_not")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) contextValidateUserUsageNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserUsageNotIn); i++ {

		if err := m.UserUsageNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GpuDeviceWhereInput) contextValidateVmsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.VmsEvery != nil {
		if err := m.VmsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_every")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) contextValidateVmsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.VmsNone != nil {
		if err := m.VmsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_none")
			}
			return err
		}
	}

	return nil
}

func (m *GpuDeviceWhereInput) contextValidateVmsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.VmsSome != nil {
		if err := m.VmsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_some")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GpuDeviceWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GpuDeviceWhereInput) UnmarshalBinary(b []byte) error {
	var res GpuDeviceWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
