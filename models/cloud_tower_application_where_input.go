// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CloudTowerApplicationWhereInput cloud tower application where input
//
// swagger:model CloudTowerApplicationWhereInput
type CloudTowerApplicationWhereInput struct {

	// a n d
	AND []*CloudTowerApplicationWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*CloudTowerApplicationWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*CloudTowerApplicationWhereInput `json:"OR,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// package
	Package *CloudTowerApplicationPackageWhereInput `json:"package,omitempty"`

	// placement situation
	PlacementSituation *string `json:"placementSituation,omitempty"`

	// placement situation contains
	PlacementSituationContains *string `json:"placementSituation_contains,omitempty"`

	// placement situation ends with
	PlacementSituationEndsWith *string `json:"placementSituation_ends_with,omitempty"`

	// placement situation gt
	PlacementSituationGt *string `json:"placementSituation_gt,omitempty"`

	// placement situation gte
	PlacementSituationGte *string `json:"placementSituation_gte,omitempty"`

	// placement situation in
	PlacementSituationIn []string `json:"placementSituation_in,omitempty"`

	// placement situation lt
	PlacementSituationLt *string `json:"placementSituation_lt,omitempty"`

	// placement situation lte
	PlacementSituationLte *string `json:"placementSituation_lte,omitempty"`

	// placement situation not
	PlacementSituationNot *string `json:"placementSituation_not,omitempty"`

	// placement situation not contains
	PlacementSituationNotContains *string `json:"placementSituation_not_contains,omitempty"`

	// placement situation not ends with
	PlacementSituationNotEndsWith *string `json:"placementSituation_not_ends_with,omitempty"`

	// placement situation not in
	PlacementSituationNotIn []string `json:"placementSituation_not_in,omitempty"`

	// placement situation not starts with
	PlacementSituationNotStartsWith *string `json:"placementSituation_not_starts_with,omitempty"`

	// placement situation starts with
	PlacementSituationStartsWith *string `json:"placementSituation_starts_with,omitempty"`

	// placement verb
	PlacementVerb *string `json:"placementVerb,omitempty"`

	// placement verb contains
	PlacementVerbContains *string `json:"placementVerb_contains,omitempty"`

	// placement verb ends with
	PlacementVerbEndsWith *string `json:"placementVerb_ends_with,omitempty"`

	// placement verb gt
	PlacementVerbGt *string `json:"placementVerb_gt,omitempty"`

	// placement verb gte
	PlacementVerbGte *string `json:"placementVerb_gte,omitempty"`

	// placement verb in
	PlacementVerbIn []string `json:"placementVerb_in,omitempty"`

	// placement verb lt
	PlacementVerbLt *string `json:"placementVerb_lt,omitempty"`

	// placement verb lte
	PlacementVerbLte *string `json:"placementVerb_lte,omitempty"`

	// placement verb not
	PlacementVerbNot *string `json:"placementVerb_not,omitempty"`

	// placement verb not contains
	PlacementVerbNotContains *string `json:"placementVerb_not_contains,omitempty"`

	// placement verb not ends with
	PlacementVerbNotEndsWith *string `json:"placementVerb_not_ends_with,omitempty"`

	// placement verb not in
	PlacementVerbNotIn []string `json:"placementVerb_not_in,omitempty"`

	// placement verb not starts with
	PlacementVerbNotStartsWith *string `json:"placementVerb_not_starts_with,omitempty"`

	// placement verb starts with
	PlacementVerbStartsWith *string `json:"placementVerb_starts_with,omitempty"`

	// resource version
	ResourceVersion *int32 `json:"resourceVersion,omitempty"`

	// resource version gt
	ResourceVersionGt *int32 `json:"resourceVersion_gt,omitempty"`

	// resource version gte
	ResourceVersionGte *int32 `json:"resourceVersion_gte,omitempty"`

	// resource version in
	ResourceVersionIn []int32 `json:"resourceVersion_in,omitempty"`

	// resource version lt
	ResourceVersionLt *int32 `json:"resourceVersion_lt,omitempty"`

	// resource version lte
	ResourceVersionLte *int32 `json:"resourceVersion_lte,omitempty"`

	// resource version not
	ResourceVersionNot *int32 `json:"resourceVersion_not,omitempty"`

	// resource version not in
	ResourceVersionNotIn []int32 `json:"resourceVersion_not_in,omitempty"`

	// state
	State *CloudTowerApplicationState `json:"state,omitempty"`

	// state in
	StateIn []CloudTowerApplicationState `json:"state_in,omitempty"`

	// state not
	StateNot *CloudTowerApplicationState `json:"state_not,omitempty"`

	// state not in
	StateNotIn []CloudTowerApplicationState `json:"state_not_in,omitempty"`

	// target package
	TargetPackage *string `json:"targetPackage,omitempty"`

	// target package contains
	TargetPackageContains *string `json:"targetPackage_contains,omitempty"`

	// target package ends with
	TargetPackageEndsWith *string `json:"targetPackage_ends_with,omitempty"`

	// target package gt
	TargetPackageGt *string `json:"targetPackage_gt,omitempty"`

	// target package gte
	TargetPackageGte *string `json:"targetPackage_gte,omitempty"`

	// target package in
	TargetPackageIn []string `json:"targetPackage_in,omitempty"`

	// target package lt
	TargetPackageLt *string `json:"targetPackage_lt,omitempty"`

	// target package lte
	TargetPackageLte *string `json:"targetPackage_lte,omitempty"`

	// target package not
	TargetPackageNot *string `json:"targetPackage_not,omitempty"`

	// target package not contains
	TargetPackageNotContains *string `json:"targetPackage_not_contains,omitempty"`

	// target package not ends with
	TargetPackageNotEndsWith *string `json:"targetPackage_not_ends_with,omitempty"`

	// target package not in
	TargetPackageNotIn []string `json:"targetPackage_not_in,omitempty"`

	// target package not starts with
	TargetPackageNotStartsWith *string `json:"targetPackage_not_starts_with,omitempty"`

	// target package starts with
	TargetPackageStartsWith *string `json:"targetPackage_starts_with,omitempty"`

	// user
	User *UserWhereInput `json:"user,omitempty"`
}

// Validate validates this cloud tower application where input
func (m *CloudTowerApplicationWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudTowerApplicationWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloudTowerApplicationWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloudTowerApplicationWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloudTowerApplicationWhereInput) validatePackage(formats strfmt.Registry) error {
	if swag.IsZero(m.Package) { // not required
		return nil
	}

	if m.Package != nil {
		if err := m.Package.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("package")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplicationWhereInput) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplicationWhereInput) validateStateIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StateIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StateIn); i++ {

		if err := m.StateIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *CloudTowerApplicationWhereInput) validateStateNot(formats strfmt.Registry) error {
	if swag.IsZero(m.StateNot) { // not required
		return nil
	}

	if m.StateNot != nil {
		if err := m.StateNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state_not")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplicationWhereInput) validateStateNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StateNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StateNotIn); i++ {

		if err := m.StateNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *CloudTowerApplicationWhereInput) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cloud tower application where input based on the context it is used
func (m *CloudTowerApplicationWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStateIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStateNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStateNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudTowerApplicationWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloudTowerApplicationWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloudTowerApplicationWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloudTowerApplicationWhereInput) contextValidatePackage(ctx context.Context, formats strfmt.Registry) error {

	if m.Package != nil {
		if err := m.Package.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("package")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplicationWhereInput) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {
		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplicationWhereInput) contextValidateStateIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StateIn); i++ {

		if err := m.StateIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *CloudTowerApplicationWhereInput) contextValidateStateNot(ctx context.Context, formats strfmt.Registry) error {

	if m.StateNot != nil {
		if err := m.StateNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state_not")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplicationWhereInput) contextValidateStateNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StateNotIn); i++ {

		if err := m.StateNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *CloudTowerApplicationWhereInput) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudTowerApplicationWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudTowerApplicationWhereInput) UnmarshalBinary(b []byte) error {
	var res CloudTowerApplicationWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
