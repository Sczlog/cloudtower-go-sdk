// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BPSUnit b p s unit
//
// swagger:model BPSUnit
type BPSUnit string

func NewBPSUnit(value BPSUnit) *BPSUnit {
	return &value
}

// Pointer returns a pointer to a freshly-allocated BPSUnit.
func (m BPSUnit) Pointer() *BPSUnit {
	return &m
}

const (

	// BPSUnitBps captures enum value "Bps"
	BPSUnitBps BPSUnit = "Bps"

	// BPSUnitKBps captures enum value "KBps"
	BPSUnitKBps BPSUnit = "KBps"

	// BPSUnitMBps captures enum value "MBps"
	BPSUnitMBps BPSUnit = "MBps"

	// BPSUnitGBps captures enum value "GBps"
	BPSUnitGBps BPSUnit = "GBps"

	// BPSUnitTBps captures enum value "TBps"
	BPSUnitTBps BPSUnit = "TBps"
)

// for schema
var bPSUnitEnum []interface{}

func init() {
	var res []BPSUnit
	if err := json.Unmarshal([]byte(`["Bps","KBps","MBps","GBps","TBps"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bPSUnitEnum = append(bPSUnitEnum, v)
	}
}

func (m BPSUnit) validateBPSUnitEnum(path, location string, value BPSUnit) error {
	if err := validate.EnumCase(path, location, value, bPSUnitEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this b p s unit
func (m BPSUnit) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBPSUnitEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this b p s unit based on context it is used
func (m BPSUnit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
