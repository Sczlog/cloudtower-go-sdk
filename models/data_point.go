// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataPoint data point
//
// swagger:model DataPoint
type DataPoint struct {

	// typename
	// Enum: [DataPoint]
	Typename *string `json:"__typename,omitempty"`

	// t
	// Required: true
	T *float64 `json:"t"`

	// v
	V *float64 `json:"v,omitempty"`
}

// Validate validates this data point
func (m *DataPoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTypename(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateT(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dataPointTypeTypenamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DataPoint"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataPointTypeTypenamePropEnum = append(dataPointTypeTypenamePropEnum, v)
	}
}

const (

	// DataPointTypenameDataPoint captures enum value "DataPoint"
	DataPointTypenameDataPoint string = "DataPoint"
)

// prop value enum
func (m *DataPoint) validateTypenameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataPointTypeTypenamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataPoint) validateTypename(formats strfmt.Registry) error {
	if swag.IsZero(m.Typename) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypenameEnum("__typename", "body", *m.Typename); err != nil {
		return err
	}

	return nil
}

func (m *DataPoint) validateT(formats strfmt.Registry) error {

	if err := validate.Required("t", "body", m.T); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this data point based on context it is used
func (m *DataPoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DataPoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataPoint) UnmarshalBinary(b []byte) error {
	var res DataPoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
