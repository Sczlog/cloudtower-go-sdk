// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SecurityGroupWhereInput security group where input
//
// swagger:model SecurityGroupWhereInput
type SecurityGroupWhereInput struct {

	// a n d
	AND []*SecurityGroupWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*SecurityGroupWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*SecurityGroupWhereInput `json:"OR,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// everoute cluster
	EverouteCluster *EverouteClusterWhereInput `json:"everoute_cluster,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// isolation policies every
	IsolationPoliciesEvery *IsolationPolicyWhereInput `json:"isolation_policies_every,omitempty"`

	// isolation policies none
	IsolationPoliciesNone *IsolationPolicyWhereInput `json:"isolation_policies_none,omitempty"`

	// isolation policies some
	IsolationPoliciesSome *IsolationPolicyWhereInput `json:"isolation_policies_some,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// security policies every
	SecurityPoliciesEvery *SecurityPolicyWhereInput `json:"security_policies_every,omitempty"`

	// security policies none
	SecurityPoliciesNone *SecurityPolicyWhereInput `json:"security_policies_none,omitempty"`

	// security policies some
	SecurityPoliciesSome *SecurityPolicyWhereInput `json:"security_policies_some,omitempty"`

	// vms every
	VmsEvery *VMWhereInput `json:"vms_every,omitempty"`

	// vms none
	VmsNone *VMWhereInput `json:"vms_none,omitempty"`

	// vms some
	VmsSome *VMWhereInput `json:"vms_some,omitempty"`
}

// Validate validates this security group where input
func (m *SecurityGroupWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEverouteCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsolationPoliciesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsolationPoliciesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsolationPoliciesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityPoliciesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityPoliciesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityPoliciesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsSome(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityGroupWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityGroupWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityGroupWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityGroupWhereInput) validateEverouteCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.EverouteCluster) { // not required
		return nil
	}

	if m.EverouteCluster != nil {
		if err := m.EverouteCluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("everoute_cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("everoute_cluster")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGroupWhereInput) validateIsolationPoliciesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.IsolationPoliciesEvery) { // not required
		return nil
	}

	if m.IsolationPoliciesEvery != nil {
		if err := m.IsolationPoliciesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isolation_policies_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isolation_policies_every")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGroupWhereInput) validateIsolationPoliciesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.IsolationPoliciesNone) { // not required
		return nil
	}

	if m.IsolationPoliciesNone != nil {
		if err := m.IsolationPoliciesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isolation_policies_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isolation_policies_none")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGroupWhereInput) validateIsolationPoliciesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.IsolationPoliciesSome) { // not required
		return nil
	}

	if m.IsolationPoliciesSome != nil {
		if err := m.IsolationPoliciesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isolation_policies_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isolation_policies_some")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGroupWhereInput) validateSecurityPoliciesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityPoliciesEvery) { // not required
		return nil
	}

	if m.SecurityPoliciesEvery != nil {
		if err := m.SecurityPoliciesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_policies_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_policies_every")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGroupWhereInput) validateSecurityPoliciesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityPoliciesNone) { // not required
		return nil
	}

	if m.SecurityPoliciesNone != nil {
		if err := m.SecurityPoliciesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_policies_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_policies_none")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGroupWhereInput) validateSecurityPoliciesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityPoliciesSome) { // not required
		return nil
	}

	if m.SecurityPoliciesSome != nil {
		if err := m.SecurityPoliciesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_policies_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_policies_some")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGroupWhereInput) validateVmsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsEvery) { // not required
		return nil
	}

	if m.VmsEvery != nil {
		if err := m.VmsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_every")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGroupWhereInput) validateVmsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsNone) { // not required
		return nil
	}

	if m.VmsNone != nil {
		if err := m.VmsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_none")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGroupWhereInput) validateVmsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsSome) { // not required
		return nil
	}

	if m.VmsSome != nil {
		if err := m.VmsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_some")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this security group where input based on the context it is used
func (m *SecurityGroupWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEverouteCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsolationPoliciesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsolationPoliciesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsolationPoliciesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityPoliciesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityPoliciesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityPoliciesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityGroupWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityGroupWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityGroupWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityGroupWhereInput) contextValidateEverouteCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.EverouteCluster != nil {
		if err := m.EverouteCluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("everoute_cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("everoute_cluster")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGroupWhereInput) contextValidateIsolationPoliciesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.IsolationPoliciesEvery != nil {
		if err := m.IsolationPoliciesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isolation_policies_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isolation_policies_every")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGroupWhereInput) contextValidateIsolationPoliciesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.IsolationPoliciesNone != nil {
		if err := m.IsolationPoliciesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isolation_policies_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isolation_policies_none")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGroupWhereInput) contextValidateIsolationPoliciesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.IsolationPoliciesSome != nil {
		if err := m.IsolationPoliciesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isolation_policies_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isolation_policies_some")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGroupWhereInput) contextValidateSecurityPoliciesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityPoliciesEvery != nil {
		if err := m.SecurityPoliciesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_policies_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_policies_every")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGroupWhereInput) contextValidateSecurityPoliciesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityPoliciesNone != nil {
		if err := m.SecurityPoliciesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_policies_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_policies_none")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGroupWhereInput) contextValidateSecurityPoliciesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityPoliciesSome != nil {
		if err := m.SecurityPoliciesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_policies_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_policies_some")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGroupWhereInput) contextValidateVmsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.VmsEvery != nil {
		if err := m.VmsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_every")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGroupWhereInput) contextValidateVmsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.VmsNone != nil {
		if err := m.VmsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_none")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGroupWhereInput) contextValidateVmsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.VmsSome != nil {
		if err := m.VmsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_some")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityGroupWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityGroupWhereInput) UnmarshalBinary(b []byte) error {
	var res SecurityGroupWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
