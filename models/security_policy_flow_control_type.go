// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SecurityPolicyFlowControlType security policy flow control type
//
// swagger:model SecurityPolicyFlowControlType
type SecurityPolicyFlowControlType string

func NewSecurityPolicyFlowControlType(value SecurityPolicyFlowControlType) *SecurityPolicyFlowControlType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SecurityPolicyFlowControlType.
func (m SecurityPolicyFlowControlType) Pointer() *SecurityPolicyFlowControlType {
	return &m
}

const (

	// SecurityPolicyFlowControlTypeALL captures enum value "ALL"
	SecurityPolicyFlowControlTypeALL SecurityPolicyFlowControlType = "ALL"
)

// for schema
var securityPolicyFlowControlTypeEnum []interface{}

func init() {
	var res []SecurityPolicyFlowControlType
	if err := json.Unmarshal([]byte(`["ALL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityPolicyFlowControlTypeEnum = append(securityPolicyFlowControlTypeEnum, v)
	}
}

func (m SecurityPolicyFlowControlType) validateSecurityPolicyFlowControlTypeEnum(path, location string, value SecurityPolicyFlowControlType) error {
	if err := validate.EnumCase(path, location, value, securityPolicyFlowControlTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this security policy flow control type
func (m SecurityPolicyFlowControlType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSecurityPolicyFlowControlTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this security policy flow control type based on context it is used
func (m SecurityPolicyFlowControlType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
