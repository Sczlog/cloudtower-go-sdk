// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BitPSUnit bit p s unit
//
// swagger:model BitPSUnit
type BitPSUnit string

func NewBitPSUnit(value BitPSUnit) *BitPSUnit {
	return &value
}

// Pointer returns a pointer to a freshly-allocated BitPSUnit.
func (m BitPSUnit) Pointer() *BitPSUnit {
	return &m
}

const (

	// BitPSUnitBps captures enum value "bps"
	BitPSUnitBps BitPSUnit = "bps"

	// BitPSUnitKbps captures enum value "Kbps"
	BitPSUnitKbps BitPSUnit = "Kbps"

	// BitPSUnitMbps captures enum value "Mbps"
	BitPSUnitMbps BitPSUnit = "Mbps"

	// BitPSUnitGbps captures enum value "Gbps"
	BitPSUnitGbps BitPSUnit = "Gbps"

	// BitPSUnitTbps captures enum value "Tbps"
	BitPSUnitTbps BitPSUnit = "Tbps"
)

// for schema
var bitPSUnitEnum []interface{}

func init() {
	var res []BitPSUnit
	if err := json.Unmarshal([]byte(`["bps","Kbps","Mbps","Gbps","Tbps"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bitPSUnitEnum = append(bitPSUnitEnum, v)
	}
}

func (m BitPSUnit) validateBitPSUnitEnum(path, location string, value BitPSUnit) error {
	if err := validate.EnumCase(path, location, value, bitPSUnitEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this bit p s unit
func (m BitPSUnit) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBitPSUnitEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this bit p s unit based on context it is used
func (m BitPSUnit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
