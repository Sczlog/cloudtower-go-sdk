// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualPrivateCloudRouterGatewayCreationParams virtual private cloud router gateway creation params
//
// swagger:model VirtualPrivateCloudRouterGatewayCreationParams
type VirtualPrivateCloudRouterGatewayCreationParams struct {

	// associated subnets ids
	// Required: true
	AssociatedSubnetsIds []string `json:"associated_subnets_ids"`

	// external ip
	ExternalIP *string `json:"external_ip,omitempty"`

	// external subnet id
	// Required: true
	ExternalSubnetID *string `json:"external_subnet_id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// rules
	// Required: true
	Rules []*VirtualPrivateCloudRouterGatewayRuleInputType `json:"rules"`

	// vpc id
	// Required: true
	VpcID *string `json:"vpc_id"`
}

// Validate validates this virtual private cloud router gateway creation params
func (m *VirtualPrivateCloudRouterGatewayCreationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssociatedSubnetsIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalSubnetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpcID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudRouterGatewayCreationParams) validateAssociatedSubnetsIds(formats strfmt.Registry) error {

	if err := validate.Required("associated_subnets_ids", "body", m.AssociatedSubnetsIds); err != nil {
		return err
	}

	return nil
}

func (m *VirtualPrivateCloudRouterGatewayCreationParams) validateExternalSubnetID(formats strfmt.Registry) error {

	if err := validate.Required("external_subnet_id", "body", m.ExternalSubnetID); err != nil {
		return err
	}

	return nil
}

func (m *VirtualPrivateCloudRouterGatewayCreationParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *VirtualPrivateCloudRouterGatewayCreationParams) validateRules(formats strfmt.Registry) error {

	if err := validate.Required("rules", "body", m.Rules); err != nil {
		return err
	}

	for i := 0; i < len(m.Rules); i++ {
		if swag.IsZero(m.Rules[i]) { // not required
			continue
		}

		if m.Rules[i] != nil {
			if err := m.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudRouterGatewayCreationParams) validateVpcID(formats strfmt.Registry) error {

	if err := validate.Required("vpc_id", "body", m.VpcID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this virtual private cloud router gateway creation params based on the context it is used
func (m *VirtualPrivateCloudRouterGatewayCreationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudRouterGatewayCreationParams) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rules); i++ {

		if m.Rules[i] != nil {
			if err := m.Rules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualPrivateCloudRouterGatewayCreationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualPrivateCloudRouterGatewayCreationParams) UnmarshalBinary(b []byte) error {
	var res VirtualPrivateCloudRouterGatewayCreationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
