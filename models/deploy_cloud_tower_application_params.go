// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeployCloudTowerApplicationParams deploy cloud tower application params
//
// swagger:model DeployCloudTowerApplicationParams
type DeployCloudTowerApplicationParams struct {

	// name
	// Required: true
	Name *string `json:"name"`

	// target package
	// Required: true
	TargetPackage *string `json:"targetPackage"`

	// vm spec
	// Required: true
	VMSpec *ApplicationVMSpecDefinition `json:"vmSpec"`
}

// Validate validates this deploy cloud tower application params
func (m *DeployCloudTowerApplicationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetPackage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployCloudTowerApplicationParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DeployCloudTowerApplicationParams) validateTargetPackage(formats strfmt.Registry) error {

	if err := validate.Required("targetPackage", "body", m.TargetPackage); err != nil {
		return err
	}

	return nil
}

func (m *DeployCloudTowerApplicationParams) validateVMSpec(formats strfmt.Registry) error {

	if err := validate.Required("vmSpec", "body", m.VMSpec); err != nil {
		return err
	}

	if m.VMSpec != nil {
		if err := m.VMSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmSpec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this deploy cloud tower application params based on the context it is used
func (m *DeployCloudTowerApplicationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVMSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployCloudTowerApplicationParams) contextValidateVMSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.VMSpec != nil {
		if err := m.VMSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeployCloudTowerApplicationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeployCloudTowerApplicationParams) UnmarshalBinary(b []byte) error {
	var res DeployCloudTowerApplicationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
