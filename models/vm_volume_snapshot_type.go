// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VMVolumeSnapshotType Vm volume snapshot type
//
// swagger:model VmVolumeSnapshotType
type VMVolumeSnapshotType string

func NewVMVolumeSnapshotType(value VMVolumeSnapshotType) *VMVolumeSnapshotType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VMVolumeSnapshotType.
func (m VMVolumeSnapshotType) Pointer() *VMVolumeSnapshotType {
	return &m
}

const (

	// VMVolumeSnapshotTypeKVMVOLUMEISCSISNAPSHOT captures enum value "KVM_VOLUME_ISCSI_SNAPSHOT"
	VMVolumeSnapshotTypeKVMVOLUMEISCSISNAPSHOT VMVolumeSnapshotType = "KVM_VOLUME_ISCSI_SNAPSHOT"

	// VMVolumeSnapshotTypeKVMVOLUMESNAPSHOT captures enum value "KVM_VOLUME_SNAPSHOT"
	VMVolumeSnapshotTypeKVMVOLUMESNAPSHOT VMVolumeSnapshotType = "KVM_VOLUME_SNAPSHOT"
)

// for schema
var vmVolumeSnapshotTypeEnum []interface{}

func init() {
	var res []VMVolumeSnapshotType
	if err := json.Unmarshal([]byte(`["KVM_VOLUME_ISCSI_SNAPSHOT","KVM_VOLUME_SNAPSHOT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmVolumeSnapshotTypeEnum = append(vmVolumeSnapshotTypeEnum, v)
	}
}

func (m VMVolumeSnapshotType) validateVMVolumeSnapshotTypeEnum(path, location string, value VMVolumeSnapshotType) error {
	if err := validate.EnumCase(path, location, value, vmVolumeSnapshotTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Vm volume snapshot type
func (m VMVolumeSnapshotType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVMVolumeSnapshotTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this Vm volume snapshot type based on context it is used
func (m VMVolumeSnapshotType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
