// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IscsiTargetCommonParams iscsi target common params
//
// swagger:model IscsiTargetCommonParams
type IscsiTargetCommonParams struct {

	// bps
	Bps *int64 `json:"bps,omitempty"`

	// bps max
	BpsMax *int64 `json:"bps_max,omitempty"`

	// bps max length
	BpsMaxLength *int64 `json:"bps_max_length,omitempty"`

	// bps max unit
	BpsMaxUnit *BPSUnit `json:"bps_max_unit,omitempty"`

	// bps rd
	BpsRd *int64 `json:"bps_rd,omitempty"`

	// bps rd max
	BpsRdMax *int64 `json:"bps_rd_max,omitempty"`

	// bps rd max length
	BpsRdMaxLength *int64 `json:"bps_rd_max_length,omitempty"`

	// bps rd max unit
	BpsRdMaxUnit *BPSUnit `json:"bps_rd_max_unit,omitempty"`

	// bps rd unit
	BpsRdUnit *BPSUnit `json:"bps_rd_unit,omitempty"`

	// bps unit
	BpsUnit *BPSUnit `json:"bps_unit,omitempty"`

	// bps wr
	BpsWr *int64 `json:"bps_wr,omitempty"`

	// bps wr max
	BpsWrMax *int64 `json:"bps_wr_max,omitempty"`

	// bps wr max length
	BpsWrMaxLength *int64 `json:"bps_wr_max_length,omitempty"`

	// bps wr max size
	BpsWrMaxSize *BPSUnit `json:"bps_wr_max_size,omitempty"`

	// bps wr unit
	BpsWrUnit *BPSUnit `json:"bps_wr_unit,omitempty"`

	// chap enabled
	ChapEnabled *bool `json:"chap_enabled,omitempty"`

	// chap name
	ChapName *string `json:"chap_name,omitempty"`

	// chap secret
	ChapSecret *string `json:"chap_secret,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// initiator chaps
	InitiatorChaps []*IscsiTargetCommonParamsInitiatorChaps `json:"initiator_chaps,omitempty"`

	// iops
	Iops *int64 `json:"iops,omitempty"`

	// iops max
	IopsMax *int64 `json:"iops_max,omitempty"`

	// iops max length
	IopsMaxLength *int64 `json:"iops_max_length,omitempty"`

	// iops rd
	IopsRd *int64 `json:"iops_rd,omitempty"`

	// iops rd max
	IopsRdMax *int64 `json:"iops_rd_max,omitempty"`

	// iops rd max length
	IopsRdMaxLength *int64 `json:"iops_rd_max_length,omitempty"`

	// iops wr
	IopsWr *int64 `json:"iops_wr,omitempty"`

	// iops wr max
	IopsWrMax *int64 `json:"iops_wr_max,omitempty"`

	// iops wr max length
	IopsWrMaxLength *int64 `json:"iops_wr_max_length,omitempty"`

	// ip whitelist
	IPWhitelist *string `json:"ip_whitelist,omitempty"`

	// iqn whitelist
	IqnWhitelist *string `json:"iqn_whitelist,omitempty"`
}

// Validate validates this iscsi target common params
func (m *IscsiTargetCommonParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBpsMaxUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBpsRdMaxUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBpsRdUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBpsUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBpsWrMaxSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBpsWrUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiatorChaps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiTargetCommonParams) validateBpsMaxUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.BpsMaxUnit) { // not required
		return nil
	}

	if m.BpsMaxUnit != nil {
		if err := m.BpsMaxUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bps_max_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bps_max_unit")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiTargetCommonParams) validateBpsRdMaxUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.BpsRdMaxUnit) { // not required
		return nil
	}

	if m.BpsRdMaxUnit != nil {
		if err := m.BpsRdMaxUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bps_rd_max_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bps_rd_max_unit")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiTargetCommonParams) validateBpsRdUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.BpsRdUnit) { // not required
		return nil
	}

	if m.BpsRdUnit != nil {
		if err := m.BpsRdUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bps_rd_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bps_rd_unit")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiTargetCommonParams) validateBpsUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.BpsUnit) { // not required
		return nil
	}

	if m.BpsUnit != nil {
		if err := m.BpsUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bps_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bps_unit")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiTargetCommonParams) validateBpsWrMaxSize(formats strfmt.Registry) error {
	if swag.IsZero(m.BpsWrMaxSize) { // not required
		return nil
	}

	if m.BpsWrMaxSize != nil {
		if err := m.BpsWrMaxSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bps_wr_max_size")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bps_wr_max_size")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiTargetCommonParams) validateBpsWrUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.BpsWrUnit) { // not required
		return nil
	}

	if m.BpsWrUnit != nil {
		if err := m.BpsWrUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bps_wr_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bps_wr_unit")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiTargetCommonParams) validateInitiatorChaps(formats strfmt.Registry) error {
	if swag.IsZero(m.InitiatorChaps) { // not required
		return nil
	}

	for i := 0; i < len(m.InitiatorChaps); i++ {
		if swag.IsZero(m.InitiatorChaps[i]) { // not required
			continue
		}

		if m.InitiatorChaps[i] != nil {
			if err := m.InitiatorChaps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("initiator_chaps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("initiator_chaps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this iscsi target common params based on the context it is used
func (m *IscsiTargetCommonParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBpsMaxUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBpsRdMaxUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBpsRdUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBpsUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBpsWrMaxSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBpsWrUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInitiatorChaps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiTargetCommonParams) contextValidateBpsMaxUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.BpsMaxUnit != nil {
		if err := m.BpsMaxUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bps_max_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bps_max_unit")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiTargetCommonParams) contextValidateBpsRdMaxUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.BpsRdMaxUnit != nil {
		if err := m.BpsRdMaxUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bps_rd_max_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bps_rd_max_unit")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiTargetCommonParams) contextValidateBpsRdUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.BpsRdUnit != nil {
		if err := m.BpsRdUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bps_rd_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bps_rd_unit")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiTargetCommonParams) contextValidateBpsUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.BpsUnit != nil {
		if err := m.BpsUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bps_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bps_unit")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiTargetCommonParams) contextValidateBpsWrMaxSize(ctx context.Context, formats strfmt.Registry) error {

	if m.BpsWrMaxSize != nil {
		if err := m.BpsWrMaxSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bps_wr_max_size")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bps_wr_max_size")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiTargetCommonParams) contextValidateBpsWrUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.BpsWrUnit != nil {
		if err := m.BpsWrUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bps_wr_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bps_wr_unit")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiTargetCommonParams) contextValidateInitiatorChaps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InitiatorChaps); i++ {

		if m.InitiatorChaps[i] != nil {
			if err := m.InitiatorChaps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("initiator_chaps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("initiator_chaps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IscsiTargetCommonParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IscsiTargetCommonParams) UnmarshalBinary(b []byte) error {
	var res IscsiTargetCommonParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
