// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NicWhereInput nic where input
//
// swagger:model NicWhereInput
type NicWhereInput struct {

	// a n d
	AND []*NicWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*NicWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*NicWhereInput `json:"OR,omitempty"`

	// driver
	Driver *string `json:"driver,omitempty"`

	// driver contains
	DriverContains *string `json:"driver_contains,omitempty"`

	// driver ends with
	DriverEndsWith *string `json:"driver_ends_with,omitempty"`

	// driver gt
	DriverGt *string `json:"driver_gt,omitempty"`

	// driver gte
	DriverGte *string `json:"driver_gte,omitempty"`

	// driver in
	DriverIn []string `json:"driver_in,omitempty"`

	// driver lt
	DriverLt *string `json:"driver_lt,omitempty"`

	// driver lte
	DriverLte *string `json:"driver_lte,omitempty"`

	// driver not
	DriverNot *string `json:"driver_not,omitempty"`

	// driver not contains
	DriverNotContains *string `json:"driver_not_contains,omitempty"`

	// driver not ends with
	DriverNotEndsWith *string `json:"driver_not_ends_with,omitempty"`

	// driver not in
	DriverNotIn []string `json:"driver_not_in,omitempty"`

	// driver not starts with
	DriverNotStartsWith *string `json:"driver_not_starts_with,omitempty"`

	// driver starts with
	DriverStartsWith *string `json:"driver_starts_with,omitempty"`

	// driver state
	DriverState *NicDriverState `json:"driver_state,omitempty"`

	// driver state in
	DriverStateIn []NicDriverState `json:"driver_state_in,omitempty"`

	// driver state not
	DriverStateNot *NicDriverState `json:"driver_state_not,omitempty"`

	// driver state not in
	DriverStateNotIn []NicDriverState `json:"driver_state_not_in,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// gateway ip
	GatewayIP *string `json:"gateway_ip,omitempty"`

	// gateway ip contains
	GatewayIPContains *string `json:"gateway_ip_contains,omitempty"`

	// gateway ip ends with
	GatewayIPEndsWith *string `json:"gateway_ip_ends_with,omitempty"`

	// gateway ip gt
	GatewayIPGt *string `json:"gateway_ip_gt,omitempty"`

	// gateway ip gte
	GatewayIPGte *string `json:"gateway_ip_gte,omitempty"`

	// gateway ip in
	GatewayIPIn []string `json:"gateway_ip_in,omitempty"`

	// gateway ip lt
	GatewayIPLt *string `json:"gateway_ip_lt,omitempty"`

	// gateway ip lte
	GatewayIPLte *string `json:"gateway_ip_lte,omitempty"`

	// gateway ip not
	GatewayIPNot *string `json:"gateway_ip_not,omitempty"`

	// gateway ip not contains
	GatewayIPNotContains *string `json:"gateway_ip_not_contains,omitempty"`

	// gateway ip not ends with
	GatewayIPNotEndsWith *string `json:"gateway_ip_not_ends_with,omitempty"`

	// gateway ip not in
	GatewayIPNotIn []string `json:"gateway_ip_not_in,omitempty"`

	// gateway ip not starts with
	GatewayIPNotStartsWith *string `json:"gateway_ip_not_starts_with,omitempty"`

	// gateway ip starts with
	GatewayIPStartsWith *string `json:"gateway_ip_starts_with,omitempty"`

	// host
	Host *HostWhereInput `json:"host,omitempty"`

	// ibdev
	Ibdev *string `json:"ibdev,omitempty"`

	// ibdev contains
	IbdevContains *string `json:"ibdev_contains,omitempty"`

	// ibdev ends with
	IbdevEndsWith *string `json:"ibdev_ends_with,omitempty"`

	// ibdev gt
	IbdevGt *string `json:"ibdev_gt,omitempty"`

	// ibdev gte
	IbdevGte *string `json:"ibdev_gte,omitempty"`

	// ibdev in
	IbdevIn []string `json:"ibdev_in,omitempty"`

	// ibdev lt
	IbdevLt *string `json:"ibdev_lt,omitempty"`

	// ibdev lte
	IbdevLte *string `json:"ibdev_lte,omitempty"`

	// ibdev not
	IbdevNot *string `json:"ibdev_not,omitempty"`

	// ibdev not contains
	IbdevNotContains *string `json:"ibdev_not_contains,omitempty"`

	// ibdev not ends with
	IbdevNotEndsWith *string `json:"ibdev_not_ends_with,omitempty"`

	// ibdev not in
	IbdevNotIn []string `json:"ibdev_not_in,omitempty"`

	// ibdev not starts with
	IbdevNotStartsWith *string `json:"ibdev_not_starts_with,omitempty"`

	// ibdev starts with
	IbdevStartsWith *string `json:"ibdev_starts_with,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// ip address
	IPAddress *string `json:"ip_address,omitempty"`

	// ip address contains
	IPAddressContains *string `json:"ip_address_contains,omitempty"`

	// ip address ends with
	IPAddressEndsWith *string `json:"ip_address_ends_with,omitempty"`

	// ip address gt
	IPAddressGt *string `json:"ip_address_gt,omitempty"`

	// ip address gte
	IPAddressGte *string `json:"ip_address_gte,omitempty"`

	// ip address in
	IPAddressIn []string `json:"ip_address_in,omitempty"`

	// ip address lt
	IPAddressLt *string `json:"ip_address_lt,omitempty"`

	// ip address lte
	IPAddressLte *string `json:"ip_address_lte,omitempty"`

	// ip address not
	IPAddressNot *string `json:"ip_address_not,omitempty"`

	// ip address not contains
	IPAddressNotContains *string `json:"ip_address_not_contains,omitempty"`

	// ip address not ends with
	IPAddressNotEndsWith *string `json:"ip_address_not_ends_with,omitempty"`

	// ip address not in
	IPAddressNotIn []string `json:"ip_address_not_in,omitempty"`

	// ip address not starts with
	IPAddressNotStartsWith *string `json:"ip_address_not_starts_with,omitempty"`

	// ip address starts with
	IPAddressStartsWith *string `json:"ip_address_starts_with,omitempty"`

	// is sriov
	IsSriov *bool `json:"is_sriov,omitempty"`

	// is sriov not
	IsSriovNot *bool `json:"is_sriov_not,omitempty"`

	// labels every
	LabelsEvery *LabelWhereInput `json:"labels_every,omitempty"`

	// labels none
	LabelsNone *LabelWhereInput `json:"labels_none,omitempty"`

	// labels some
	LabelsSome *LabelWhereInput `json:"labels_some,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// mac address
	MacAddress *string `json:"mac_address,omitempty"`

	// mac address contains
	MacAddressContains *string `json:"mac_address_contains,omitempty"`

	// mac address ends with
	MacAddressEndsWith *string `json:"mac_address_ends_with,omitempty"`

	// mac address gt
	MacAddressGt *string `json:"mac_address_gt,omitempty"`

	// mac address gte
	MacAddressGte *string `json:"mac_address_gte,omitempty"`

	// mac address in
	MacAddressIn []string `json:"mac_address_in,omitempty"`

	// mac address lt
	MacAddressLt *string `json:"mac_address_lt,omitempty"`

	// mac address lte
	MacAddressLte *string `json:"mac_address_lte,omitempty"`

	// mac address not
	MacAddressNot *string `json:"mac_address_not,omitempty"`

	// mac address not contains
	MacAddressNotContains *string `json:"mac_address_not_contains,omitempty"`

	// mac address not ends with
	MacAddressNotEndsWith *string `json:"mac_address_not_ends_with,omitempty"`

	// mac address not in
	MacAddressNotIn []string `json:"mac_address_not_in,omitempty"`

	// mac address not starts with
	MacAddressNotStartsWith *string `json:"mac_address_not_starts_with,omitempty"`

	// mac address starts with
	MacAddressStartsWith *string `json:"mac_address_starts_with,omitempty"`

	// max vf num
	MaxVfNum *int32 `json:"max_vf_num,omitempty"`

	// max vf num gt
	MaxVfNumGt *int32 `json:"max_vf_num_gt,omitempty"`

	// max vf num gte
	MaxVfNumGte *int32 `json:"max_vf_num_gte,omitempty"`

	// max vf num in
	MaxVfNumIn []int32 `json:"max_vf_num_in,omitempty"`

	// max vf num lt
	MaxVfNumLt *int32 `json:"max_vf_num_lt,omitempty"`

	// max vf num lte
	MaxVfNumLte *int32 `json:"max_vf_num_lte,omitempty"`

	// max vf num not
	MaxVfNumNot *int32 `json:"max_vf_num_not,omitempty"`

	// max vf num not in
	MaxVfNumNotIn []int32 `json:"max_vf_num_not_in,omitempty"`

	// model
	Model *string `json:"model,omitempty"`

	// model contains
	ModelContains *string `json:"model_contains,omitempty"`

	// model ends with
	ModelEndsWith *string `json:"model_ends_with,omitempty"`

	// model gt
	ModelGt *string `json:"model_gt,omitempty"`

	// model gte
	ModelGte *string `json:"model_gte,omitempty"`

	// model in
	ModelIn []string `json:"model_in,omitempty"`

	// model lt
	ModelLt *string `json:"model_lt,omitempty"`

	// model lte
	ModelLte *string `json:"model_lte,omitempty"`

	// model not
	ModelNot *string `json:"model_not,omitempty"`

	// model not contains
	ModelNotContains *string `json:"model_not_contains,omitempty"`

	// model not ends with
	ModelNotEndsWith *string `json:"model_not_ends_with,omitempty"`

	// model not in
	ModelNotIn []string `json:"model_not_in,omitempty"`

	// model not starts with
	ModelNotStartsWith *string `json:"model_not_starts_with,omitempty"`

	// model starts with
	ModelStartsWith *string `json:"model_starts_with,omitempty"`

	// mtu
	Mtu *int32 `json:"mtu,omitempty"`

	// mtu gt
	MtuGt *int32 `json:"mtu_gt,omitempty"`

	// mtu gte
	MtuGte *int32 `json:"mtu_gte,omitempty"`

	// mtu in
	MtuIn []int32 `json:"mtu_in,omitempty"`

	// mtu lt
	MtuLt *int32 `json:"mtu_lt,omitempty"`

	// mtu lte
	MtuLte *int32 `json:"mtu_lte,omitempty"`

	// mtu not
	MtuNot *int32 `json:"mtu_not,omitempty"`

	// mtu not in
	MtuNotIn []int32 `json:"mtu_not_in,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// nic uuid
	NicUUID *string `json:"nic_uuid,omitempty"`

	// nic uuid contains
	NicUUIDContains *string `json:"nic_uuid_contains,omitempty"`

	// nic uuid ends with
	NicUUIDEndsWith *string `json:"nic_uuid_ends_with,omitempty"`

	// nic uuid gt
	NicUUIDGt *string `json:"nic_uuid_gt,omitempty"`

	// nic uuid gte
	NicUUIDGte *string `json:"nic_uuid_gte,omitempty"`

	// nic uuid in
	NicUUIDIn []string `json:"nic_uuid_in,omitempty"`

	// nic uuid lt
	NicUUIDLt *string `json:"nic_uuid_lt,omitempty"`

	// nic uuid lte
	NicUUIDLte *string `json:"nic_uuid_lte,omitempty"`

	// nic uuid not
	NicUUIDNot *string `json:"nic_uuid_not,omitempty"`

	// nic uuid not contains
	NicUUIDNotContains *string `json:"nic_uuid_not_contains,omitempty"`

	// nic uuid not ends with
	NicUUIDNotEndsWith *string `json:"nic_uuid_not_ends_with,omitempty"`

	// nic uuid not in
	NicUUIDNotIn []string `json:"nic_uuid_not_in,omitempty"`

	// nic uuid not starts with
	NicUUIDNotStartsWith *string `json:"nic_uuid_not_starts_with,omitempty"`

	// nic uuid starts with
	NicUUIDStartsWith *string `json:"nic_uuid_starts_with,omitempty"`

	// physical
	Physical *bool `json:"physical,omitempty"`

	// physical not
	PhysicalNot *bool `json:"physical_not,omitempty"`

	// rdma enabled
	RdmaEnabled *bool `json:"rdma_enabled,omitempty"`

	// rdma enabled not
	RdmaEnabledNot *bool `json:"rdma_enabled_not,omitempty"`

	// running
	Running *bool `json:"running,omitempty"`

	// running not
	RunningNot *bool `json:"running_not,omitempty"`

	// speed
	Speed *int64 `json:"speed,omitempty"`

	// speed gt
	SpeedGt *int64 `json:"speed_gt,omitempty"`

	// speed gte
	SpeedGte *int64 `json:"speed_gte,omitempty"`

	// speed in
	SpeedIn []int64 `json:"speed_in,omitempty"`

	// speed lt
	SpeedLt *int64 `json:"speed_lt,omitempty"`

	// speed lte
	SpeedLte *int64 `json:"speed_lte,omitempty"`

	// speed not
	SpeedNot *int64 `json:"speed_not,omitempty"`

	// speed not in
	SpeedNotIn []int64 `json:"speed_not_in,omitempty"`

	// subnet mask
	SubnetMask *string `json:"subnet_mask,omitempty"`

	// subnet mask contains
	SubnetMaskContains *string `json:"subnet_mask_contains,omitempty"`

	// subnet mask ends with
	SubnetMaskEndsWith *string `json:"subnet_mask_ends_with,omitempty"`

	// subnet mask gt
	SubnetMaskGt *string `json:"subnet_mask_gt,omitempty"`

	// subnet mask gte
	SubnetMaskGte *string `json:"subnet_mask_gte,omitempty"`

	// subnet mask in
	SubnetMaskIn []string `json:"subnet_mask_in,omitempty"`

	// subnet mask lt
	SubnetMaskLt *string `json:"subnet_mask_lt,omitempty"`

	// subnet mask lte
	SubnetMaskLte *string `json:"subnet_mask_lte,omitempty"`

	// subnet mask not
	SubnetMaskNot *string `json:"subnet_mask_not,omitempty"`

	// subnet mask not contains
	SubnetMaskNotContains *string `json:"subnet_mask_not_contains,omitempty"`

	// subnet mask not ends with
	SubnetMaskNotEndsWith *string `json:"subnet_mask_not_ends_with,omitempty"`

	// subnet mask not in
	SubnetMaskNotIn []string `json:"subnet_mask_not_in,omitempty"`

	// subnet mask not starts with
	SubnetMaskNotStartsWith *string `json:"subnet_mask_not_starts_with,omitempty"`

	// subnet mask starts with
	SubnetMaskStartsWith *string `json:"subnet_mask_starts_with,omitempty"`

	// total vf num
	TotalVfNum *int32 `json:"total_vf_num,omitempty"`

	// total vf num gt
	TotalVfNumGt *int32 `json:"total_vf_num_gt,omitempty"`

	// total vf num gte
	TotalVfNumGte *int32 `json:"total_vf_num_gte,omitempty"`

	// total vf num in
	TotalVfNumIn []int32 `json:"total_vf_num_in,omitempty"`

	// total vf num lt
	TotalVfNumLt *int32 `json:"total_vf_num_lt,omitempty"`

	// total vf num lte
	TotalVfNumLte *int32 `json:"total_vf_num_lte,omitempty"`

	// total vf num not
	TotalVfNumNot *int32 `json:"total_vf_num_not,omitempty"`

	// total vf num not in
	TotalVfNumNotIn []int32 `json:"total_vf_num_not_in,omitempty"`

	// type
	Type *NetworkType `json:"type,omitempty"`

	// type in
	TypeIn []NetworkType `json:"type_in,omitempty"`

	// type not
	TypeNot *NetworkType `json:"type_not,omitempty"`

	// type not in
	TypeNotIn []NetworkType `json:"type_not_in,omitempty"`

	// up
	Up *bool `json:"up,omitempty"`

	// up not
	UpNot *bool `json:"up_not,omitempty"`

	// used vf num
	UsedVfNum *int32 `json:"used_vf_num,omitempty"`

	// used vf num gt
	UsedVfNumGt *int32 `json:"used_vf_num_gt,omitempty"`

	// used vf num gte
	UsedVfNumGte *int32 `json:"used_vf_num_gte,omitempty"`

	// used vf num in
	UsedVfNumIn []int32 `json:"used_vf_num_in,omitempty"`

	// used vf num lt
	UsedVfNumLt *int32 `json:"used_vf_num_lt,omitempty"`

	// used vf num lte
	UsedVfNumLte *int32 `json:"used_vf_num_lte,omitempty"`

	// used vf num not
	UsedVfNumNot *int32 `json:"used_vf_num_not,omitempty"`

	// used vf num not in
	UsedVfNumNotIn []int32 `json:"used_vf_num_not_in,omitempty"`

	// user usage
	UserUsage *NicUserUsage `json:"user_usage,omitempty"`

	// user usage in
	UserUsageIn []NicUserUsage `json:"user_usage_in,omitempty"`

	// user usage not
	UserUsageNot *NicUserUsage `json:"user_usage_not,omitempty"`

	// user usage not in
	UserUsageNotIn []NicUserUsage `json:"user_usage_not_in,omitempty"`

	// vds
	Vds *VdsWhereInput `json:"vds,omitempty"`
}

// Validate validates this nic where input
func (m *NicWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDriverState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDriverStateIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDriverStateNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDriverStateNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUsage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUsageIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUsageNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUsageNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NicWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NicWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NicWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NicWhereInput) validateDriverState(formats strfmt.Registry) error {
	if swag.IsZero(m.DriverState) { // not required
		return nil
	}

	if m.DriverState != nil {
		if err := m.DriverState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("driver_state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("driver_state")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateDriverStateIn(formats strfmt.Registry) error {
	if swag.IsZero(m.DriverStateIn) { // not required
		return nil
	}

	for i := 0; i < len(m.DriverStateIn); i++ {

		if err := m.DriverStateIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("driver_state_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("driver_state_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) validateDriverStateNot(formats strfmt.Registry) error {
	if swag.IsZero(m.DriverStateNot) { // not required
		return nil
	}

	if m.DriverStateNot != nil {
		if err := m.DriverStateNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("driver_state_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("driver_state_not")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateDriverStateNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.DriverStateNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.DriverStateNotIn); i++ {

		if err := m.DriverStateNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("driver_state_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("driver_state_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) validateHost(formats strfmt.Registry) error {
	if swag.IsZero(m.Host) { // not required
		return nil
	}

	if m.Host != nil {
		if err := m.Host.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateLabelsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsEvery) { // not required
		return nil
	}

	if m.LabelsEvery != nil {
		if err := m.LabelsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_every")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateLabelsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsNone) { // not required
		return nil
	}

	if m.LabelsNone != nil {
		if err := m.LabelsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_none")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateLabelsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsSome) { // not required
		return nil
	}

	if m.LabelsSome != nil {
		if err := m.LabelsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_some")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) validateTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNot) { // not required
		return nil
	}

	if m.TypeNot != nil {
		if err := m.TypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) validateUserUsage(formats strfmt.Registry) error {
	if swag.IsZero(m.UserUsage) { // not required
		return nil
	}

	if m.UserUsage != nil {
		if err := m.UserUsage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateUserUsageIn(formats strfmt.Registry) error {
	if swag.IsZero(m.UserUsageIn) { // not required
		return nil
	}

	for i := 0; i < len(m.UserUsageIn); i++ {

		if err := m.UserUsageIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) validateUserUsageNot(formats strfmt.Registry) error {
	if swag.IsZero(m.UserUsageNot) { // not required
		return nil
	}

	if m.UserUsageNot != nil {
		if err := m.UserUsageNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_not")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateUserUsageNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.UserUsageNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.UserUsageNotIn); i++ {

		if err := m.UserUsageNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) validateVds(formats strfmt.Registry) error {
	if swag.IsZero(m.Vds) { // not required
		return nil
	}

	if m.Vds != nil {
		if err := m.Vds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vds")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nic where input based on the context it is used
func (m *NicWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDriverState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDriverStateIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDriverStateNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDriverStateNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserUsageIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserUsageNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserUsageNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NicWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateDriverState(ctx context.Context, formats strfmt.Registry) error {

	if m.DriverState != nil {
		if err := m.DriverState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("driver_state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("driver_state")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateDriverStateIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DriverStateIn); i++ {

		if err := m.DriverStateIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("driver_state_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("driver_state_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateDriverStateNot(ctx context.Context, formats strfmt.Registry) error {

	if m.DriverStateNot != nil {
		if err := m.DriverStateNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("driver_state_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("driver_state_not")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateDriverStateNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DriverStateNotIn); i++ {

		if err := m.DriverStateNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("driver_state_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("driver_state_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateHost(ctx context.Context, formats strfmt.Registry) error {

	if m.Host != nil {
		if err := m.Host.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateLabelsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsEvery != nil {
		if err := m.LabelsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_every")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateLabelsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsNone != nil {
		if err := m.LabelsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_none")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateLabelsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsSome != nil {
		if err := m.LabelsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_some")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeNot != nil {
		if err := m.TypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateUserUsage(ctx context.Context, formats strfmt.Registry) error {

	if m.UserUsage != nil {
		if err := m.UserUsage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateUserUsageIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserUsageIn); i++ {

		if err := m.UserUsageIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateUserUsageNot(ctx context.Context, formats strfmt.Registry) error {

	if m.UserUsageNot != nil {
		if err := m.UserUsageNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_not")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateUserUsageNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserUsageNotIn); i++ {

		if err := m.UserUsageNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateVds(ctx context.Context, formats strfmt.Registry) error {

	if m.Vds != nil {
		if err := m.Vds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vds")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NicWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NicWhereInput) UnmarshalBinary(b []byte) error {
	var res NicWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
