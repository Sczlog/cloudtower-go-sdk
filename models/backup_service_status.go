// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BackupServiceStatus backup service status
//
// swagger:model BackupServiceStatus
type BackupServiceStatus string

func NewBackupServiceStatus(value BackupServiceStatus) *BackupServiceStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated BackupServiceStatus.
func (m BackupServiceStatus) Pointer() *BackupServiceStatus {
	return &m
}

const (

	// BackupServiceStatusERROR captures enum value "ERROR"
	BackupServiceStatusERROR BackupServiceStatus = "ERROR"

	// BackupServiceStatusINITIALIZING captures enum value "INITIALIZING"
	BackupServiceStatusINITIALIZING BackupServiceStatus = "INITIALIZING"

	// BackupServiceStatusINSTALLING captures enum value "INSTALLING"
	BackupServiceStatusINSTALLING BackupServiceStatus = "INSTALLING"

	// BackupServiceStatusINSTALLFAILED captures enum value "INSTALL_FAILED"
	BackupServiceStatusINSTALLFAILED BackupServiceStatus = "INSTALL_FAILED"

	// BackupServiceStatusRUNNING captures enum value "RUNNING"
	BackupServiceStatusRUNNING BackupServiceStatus = "RUNNING"

	// BackupServiceStatusTERMINATEFAILED captures enum value "TERMINATE_FAILED"
	BackupServiceStatusTERMINATEFAILED BackupServiceStatus = "TERMINATE_FAILED"

	// BackupServiceStatusTERMINATING captures enum value "TERMINATING"
	BackupServiceStatusTERMINATING BackupServiceStatus = "TERMINATING"

	// BackupServiceStatusUPGRADEFAILED captures enum value "UPGRADE_FAILED"
	BackupServiceStatusUPGRADEFAILED BackupServiceStatus = "UPGRADE_FAILED"

	// BackupServiceStatusUPGRADING captures enum value "UPGRADING"
	BackupServiceStatusUPGRADING BackupServiceStatus = "UPGRADING"
)

// for schema
var backupServiceStatusEnum []interface{}

func init() {
	var res []BackupServiceStatus
	if err := json.Unmarshal([]byte(`["ERROR","INITIALIZING","INSTALLING","INSTALL_FAILED","RUNNING","TERMINATE_FAILED","TERMINATING","UPGRADE_FAILED","UPGRADING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupServiceStatusEnum = append(backupServiceStatusEnum, v)
	}
}

func (m BackupServiceStatus) validateBackupServiceStatusEnum(path, location string, value BackupServiceStatus) error {
	if err := validate.EnumCase(path, location, value, backupServiceStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this backup service status
func (m BackupServiceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBackupServiceStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this backup service status based on context it is used
func (m BackupServiceStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
