// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// GpuDeviceStatus gpu device status
//
// swagger:model GpuDeviceStatus
type GpuDeviceStatus string

func NewGpuDeviceStatus(value GpuDeviceStatus) *GpuDeviceStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated GpuDeviceStatus.
func (m GpuDeviceStatus) Pointer() *GpuDeviceStatus {
	return &m
}

const (

	// GpuDeviceStatusNEEDREBOOT captures enum value "NEED_REBOOT"
	GpuDeviceStatusNEEDREBOOT GpuDeviceStatus = "NEED_REBOOT"

	// GpuDeviceStatusNOTREADY captures enum value "NOT_READY"
	GpuDeviceStatusNOTREADY GpuDeviceStatus = "NOT_READY"

	// GpuDeviceStatusREADY captures enum value "READY"
	GpuDeviceStatusREADY GpuDeviceStatus = "READY"
)

// for schema
var gpuDeviceStatusEnum []interface{}

func init() {
	var res []GpuDeviceStatus
	if err := json.Unmarshal([]byte(`["NEED_REBOOT","NOT_READY","READY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gpuDeviceStatusEnum = append(gpuDeviceStatusEnum, v)
	}
}

func (m GpuDeviceStatus) validateGpuDeviceStatusEnum(path, location string, value GpuDeviceStatus) error {
	if err := validate.EnumCase(path, location, value, gpuDeviceStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this gpu device status
func (m GpuDeviceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateGpuDeviceStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this gpu device status based on context it is used
func (m GpuDeviceStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
