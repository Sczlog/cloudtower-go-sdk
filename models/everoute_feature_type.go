// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EverouteFeatureType everoute feature type
//
// swagger:model EverouteFeatureType
type EverouteFeatureType string

func NewEverouteFeatureType(value EverouteFeatureType) *EverouteFeatureType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EverouteFeatureType.
func (m EverouteFeatureType) Pointer() *EverouteFeatureType {
	return &m
}

const (

	// EverouteFeatureTypeDFW captures enum value "DFW"
	EverouteFeatureTypeDFW EverouteFeatureType = "DFW"

	// EverouteFeatureTypeLB captures enum value "LB"
	EverouteFeatureTypeLB EverouteFeatureType = "LB"

	// EverouteFeatureTypeVPC captures enum value "VPC"
	EverouteFeatureTypeVPC EverouteFeatureType = "VPC"
)

// for schema
var everouteFeatureTypeEnum []interface{}

func init() {
	var res []EverouteFeatureType
	if err := json.Unmarshal([]byte(`["DFW","LB","VPC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		everouteFeatureTypeEnum = append(everouteFeatureTypeEnum, v)
	}
}

func (m EverouteFeatureType) validateEverouteFeatureTypeEnum(path, location string, value EverouteFeatureType) error {
	if err := validate.EnumCase(path, location, value, everouteFeatureTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this everoute feature type
func (m EverouteFeatureType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEverouteFeatureTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this everoute feature type based on context it is used
func (m EverouteFeatureType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
