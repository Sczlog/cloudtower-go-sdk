// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserLoginInfo user login info
//
// swagger:model UserLoginInfo
type UserLoginInfo struct {

	// typename
	// Enum: [UserLoginInfo]
	Typename *string `json:"__typename,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// locked at
	LockedAt interface{} `json:"locked_at,omitempty"`

	// miss num
	// Required: true
	MissNum *int32 `json:"miss_num"`

	// missed at
	MissedAt interface{} `json:"missed_at,omitempty"`

	// user
	// Required: true
	User *User `json:"user"`
}

// Validate validates this user login info
func (m *UserLoginInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTypename(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMissNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userLoginInfoTypeTypenamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UserLoginInfo"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userLoginInfoTypeTypenamePropEnum = append(userLoginInfoTypeTypenamePropEnum, v)
	}
}

const (

	// UserLoginInfoTypenameUserLoginInfo captures enum value "UserLoginInfo"
	UserLoginInfoTypenameUserLoginInfo string = "UserLoginInfo"
)

// prop value enum
func (m *UserLoginInfo) validateTypenameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userLoginInfoTypeTypenamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserLoginInfo) validateTypename(formats strfmt.Registry) error {
	if swag.IsZero(m.Typename) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypenameEnum("__typename", "body", *m.Typename); err != nil {
		return err
	}

	return nil
}

func (m *UserLoginInfo) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *UserLoginInfo) validateMissNum(formats strfmt.Registry) error {

	if err := validate.Required("miss_num", "body", m.MissNum); err != nil {
		return err
	}

	return nil
}

func (m *UserLoginInfo) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this user login info based on the context it is used
func (m *UserLoginInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserLoginInfo) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserLoginInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserLoginInfo) UnmarshalBinary(b []byte) error {
	var res UserLoginInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
