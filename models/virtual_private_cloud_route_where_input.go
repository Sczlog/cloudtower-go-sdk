// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VirtualPrivateCloudRouteWhereInput virtual private cloud route where input
//
// swagger:model VirtualPrivateCloudRouteWhereInput
type VirtualPrivateCloudRouteWhereInput struct {

	// a n d
	AND []*VirtualPrivateCloudRouteWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*VirtualPrivateCloudRouteWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*VirtualPrivateCloudRouteWhereInput `json:"OR,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// destination
	Destination *string `json:"destination,omitempty"`

	// destination contains
	DestinationContains *string `json:"destination_contains,omitempty"`

	// destination ends with
	DestinationEndsWith *string `json:"destination_ends_with,omitempty"`

	// destination gt
	DestinationGt *string `json:"destination_gt,omitempty"`

	// destination gte
	DestinationGte *string `json:"destination_gte,omitempty"`

	// destination in
	DestinationIn []string `json:"destination_in,omitempty"`

	// destination lt
	DestinationLt *string `json:"destination_lt,omitempty"`

	// destination lte
	DestinationLte *string `json:"destination_lte,omitempty"`

	// destination not
	DestinationNot *string `json:"destination_not,omitempty"`

	// destination not contains
	DestinationNotContains *string `json:"destination_not_contains,omitempty"`

	// destination not ends with
	DestinationNotEndsWith *string `json:"destination_not_ends_with,omitempty"`

	// destination not in
	DestinationNotIn []string `json:"destination_not_in,omitempty"`

	// destination not starts with
	DestinationNotStartsWith *string `json:"destination_not_starts_with,omitempty"`

	// destination starts with
	DestinationStartsWith *string `json:"destination_starts_with,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// nat gateway
	NatGateway *VirtualPrivateCloudNatGatewayWhereInput `json:"nat_gateway,omitempty"`

	// next hop local id
	NextHopLocalID *string `json:"next_hop_local_id,omitempty"`

	// next hop local id contains
	NextHopLocalIDContains *string `json:"next_hop_local_id_contains,omitempty"`

	// next hop local id ends with
	NextHopLocalIDEndsWith *string `json:"next_hop_local_id_ends_with,omitempty"`

	// next hop local id gt
	NextHopLocalIDGt *string `json:"next_hop_local_id_gt,omitempty"`

	// next hop local id gte
	NextHopLocalIDGte *string `json:"next_hop_local_id_gte,omitempty"`

	// next hop local id in
	NextHopLocalIDIn []string `json:"next_hop_local_id_in,omitempty"`

	// next hop local id lt
	NextHopLocalIDLt *string `json:"next_hop_local_id_lt,omitempty"`

	// next hop local id lte
	NextHopLocalIDLte *string `json:"next_hop_local_id_lte,omitempty"`

	// next hop local id not
	NextHopLocalIDNot *string `json:"next_hop_local_id_not,omitempty"`

	// next hop local id not contains
	NextHopLocalIDNotContains *string `json:"next_hop_local_id_not_contains,omitempty"`

	// next hop local id not ends with
	NextHopLocalIDNotEndsWith *string `json:"next_hop_local_id_not_ends_with,omitempty"`

	// next hop local id not in
	NextHopLocalIDNotIn []string `json:"next_hop_local_id_not_in,omitempty"`

	// next hop local id not starts with
	NextHopLocalIDNotStartsWith *string `json:"next_hop_local_id_not_starts_with,omitempty"`

	// next hop local id starts with
	NextHopLocalIDStartsWith *string `json:"next_hop_local_id_starts_with,omitempty"`

	// next hop type
	NextHopType *VirtualPrivateCloudRouteNextHopType `json:"next_hop_type,omitempty"`

	// next hop type in
	NextHopTypeIn []VirtualPrivateCloudRouteNextHopType `json:"next_hop_type_in,omitempty"`

	// next hop type not
	NextHopTypeNot *VirtualPrivateCloudRouteNextHopType `json:"next_hop_type_not,omitempty"`

	// next hop type not in
	NextHopTypeNotIn []VirtualPrivateCloudRouteNextHopType `json:"next_hop_type_not_in,omitempty"`

	// route table
	RouteTable *VirtualPrivateCloudRouteTableWhereInput `json:"route_table,omitempty"`

	// router gateway
	RouterGateway *VirtualPrivateCloudRouterGatewayWhereInput `json:"router_gateway,omitempty"`

	// vpc peering
	VpcPeering *VirtualPrivateCloudPeeringWhereInput `json:"vpc_peering,omitempty"`
}

// Validate validates this virtual private cloud route where input
func (m *VirtualPrivateCloudRouteWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNatGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextHopType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextHopTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextHopTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextHopTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteTable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouterGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpcPeering(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) validateNatGateway(formats strfmt.Registry) error {
	if swag.IsZero(m.NatGateway) { // not required
		return nil
	}

	if m.NatGateway != nil {
		if err := m.NatGateway.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nat_gateway")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nat_gateway")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) validateNextHopType(formats strfmt.Registry) error {
	if swag.IsZero(m.NextHopType) { // not required
		return nil
	}

	if m.NextHopType != nil {
		if err := m.NextHopType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("next_hop_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("next_hop_type")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) validateNextHopTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.NextHopTypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.NextHopTypeIn); i++ {

		if err := m.NextHopTypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("next_hop_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("next_hop_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) validateNextHopTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.NextHopTypeNot) { // not required
		return nil
	}

	if m.NextHopTypeNot != nil {
		if err := m.NextHopTypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("next_hop_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("next_hop_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) validateNextHopTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.NextHopTypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.NextHopTypeNotIn); i++ {

		if err := m.NextHopTypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("next_hop_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("next_hop_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) validateRouteTable(formats strfmt.Registry) error {
	if swag.IsZero(m.RouteTable) { // not required
		return nil
	}

	if m.RouteTable != nil {
		if err := m.RouteTable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("route_table")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("route_table")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) validateRouterGateway(formats strfmt.Registry) error {
	if swag.IsZero(m.RouterGateway) { // not required
		return nil
	}

	if m.RouterGateway != nil {
		if err := m.RouterGateway.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("router_gateway")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("router_gateway")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) validateVpcPeering(formats strfmt.Registry) error {
	if swag.IsZero(m.VpcPeering) { // not required
		return nil
	}

	if m.VpcPeering != nil {
		if err := m.VpcPeering.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc_peering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc_peering")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this virtual private cloud route where input based on the context it is used
func (m *VirtualPrivateCloudRouteWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNatGateway(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNextHopType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNextHopTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNextHopTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNextHopTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRouteTable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRouterGateway(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVpcPeering(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) contextValidateNatGateway(ctx context.Context, formats strfmt.Registry) error {

	if m.NatGateway != nil {
		if err := m.NatGateway.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nat_gateway")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nat_gateway")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) contextValidateNextHopType(ctx context.Context, formats strfmt.Registry) error {

	if m.NextHopType != nil {
		if err := m.NextHopType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("next_hop_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("next_hop_type")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) contextValidateNextHopTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NextHopTypeIn); i++ {

		if err := m.NextHopTypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("next_hop_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("next_hop_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) contextValidateNextHopTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.NextHopTypeNot != nil {
		if err := m.NextHopTypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("next_hop_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("next_hop_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) contextValidateNextHopTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NextHopTypeNotIn); i++ {

		if err := m.NextHopTypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("next_hop_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("next_hop_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) contextValidateRouteTable(ctx context.Context, formats strfmt.Registry) error {

	if m.RouteTable != nil {
		if err := m.RouteTable.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("route_table")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("route_table")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) contextValidateRouterGateway(ctx context.Context, formats strfmt.Registry) error {

	if m.RouterGateway != nil {
		if err := m.RouterGateway.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("router_gateway")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("router_gateway")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudRouteWhereInput) contextValidateVpcPeering(ctx context.Context, formats strfmt.Registry) error {

	if m.VpcPeering != nil {
		if err := m.VpcPeering.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc_peering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc_peering")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualPrivateCloudRouteWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualPrivateCloudRouteWhereInput) UnmarshalBinary(b []byte) error {
	var res VirtualPrivateCloudRouteWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
