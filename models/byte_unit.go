// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ByteUnit byte unit
//
// swagger:model ByteUnit
type ByteUnit string

func NewByteUnit(value ByteUnit) *ByteUnit {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ByteUnit.
func (m ByteUnit) Pointer() *ByteUnit {
	return &m
}

const (

	// ByteUnitB captures enum value "B"
	ByteUnitB ByteUnit = "B"

	// ByteUnitKB captures enum value "KB"
	ByteUnitKB ByteUnit = "KB"

	// ByteUnitMB captures enum value "MB"
	ByteUnitMB ByteUnit = "MB"

	// ByteUnitGB captures enum value "GB"
	ByteUnitGB ByteUnit = "GB"

	// ByteUnitTB captures enum value "TB"
	ByteUnitTB ByteUnit = "TB"

	// ByteUnitPB captures enum value "PB"
	ByteUnitPB ByteUnit = "PB"
)

// for schema
var byteUnitEnum []interface{}

func init() {
	var res []ByteUnit
	if err := json.Unmarshal([]byte(`["B","KB","MB","GB","TB","PB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		byteUnitEnum = append(byteUnitEnum, v)
	}
}

func (m ByteUnit) validateByteUnitEnum(path, location string, value ByteUnit) error {
	if err := validate.EnumCase(path, location, value, byteUnitEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this byte unit
func (m ByteUnit) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateByteUnitEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this byte unit based on context it is used
func (m ByteUnit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
