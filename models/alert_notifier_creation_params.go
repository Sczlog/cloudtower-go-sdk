// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AlertNotifierCreationParams alert notifier creation params
//
// swagger:model AlertNotifierCreationParams
type AlertNotifierCreationParams struct {

	// clusters
	// Required: true
	Clusters *ClusterWhereInput `json:"clusters"`

	// disabled
	// Required: true
	Disabled *bool `json:"disabled"`

	// email from
	// Required: true
	EmailFrom *string `json:"email_from"`

	// email tos
	// Required: true
	EmailTos []string `json:"email_tos"`

	// language code
	// Required: true
	LanguageCode *NotifierLanguageCode `json:"language_code"`

	// name
	// Required: true
	Name *string `json:"name"`

	// notice severities
	// Required: true
	NoticeSeverities []string `json:"notice_severities"`

	// smtp server id
	// Required: true
	SMTPServerID *string `json:"smtp_server_id"`
}

// Validate validates this alert notifier creation params
func (m *AlertNotifierCreationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailTos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguageCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoticeSeverities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSMTPServerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertNotifierCreationParams) validateClusters(formats strfmt.Registry) error {

	if err := validate.Required("clusters", "body", m.Clusters); err != nil {
		return err
	}

	if m.Clusters != nil {
		if err := m.Clusters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierCreationParams) validateDisabled(formats strfmt.Registry) error {

	if err := validate.Required("disabled", "body", m.Disabled); err != nil {
		return err
	}

	return nil
}

func (m *AlertNotifierCreationParams) validateEmailFrom(formats strfmt.Registry) error {

	if err := validate.Required("email_from", "body", m.EmailFrom); err != nil {
		return err
	}

	return nil
}

func (m *AlertNotifierCreationParams) validateEmailTos(formats strfmt.Registry) error {

	if err := validate.Required("email_tos", "body", m.EmailTos); err != nil {
		return err
	}

	return nil
}

func (m *AlertNotifierCreationParams) validateLanguageCode(formats strfmt.Registry) error {

	if err := validate.Required("language_code", "body", m.LanguageCode); err != nil {
		return err
	}

	if err := validate.Required("language_code", "body", m.LanguageCode); err != nil {
		return err
	}

	if m.LanguageCode != nil {
		if err := m.LanguageCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language_code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("language_code")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierCreationParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var alertNotifierCreationParamsNoticeSeveritiesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CRITICAL","NOTICE","INFO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		alertNotifierCreationParamsNoticeSeveritiesItemsEnum = append(alertNotifierCreationParamsNoticeSeveritiesItemsEnum, v)
	}
}

func (m *AlertNotifierCreationParams) validateNoticeSeveritiesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, alertNotifierCreationParamsNoticeSeveritiesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AlertNotifierCreationParams) validateNoticeSeverities(formats strfmt.Registry) error {

	if err := validate.Required("notice_severities", "body", m.NoticeSeverities); err != nil {
		return err
	}

	for i := 0; i < len(m.NoticeSeverities); i++ {

		// value enum
		if err := m.validateNoticeSeveritiesItemsEnum("notice_severities"+"."+strconv.Itoa(i), "body", m.NoticeSeverities[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *AlertNotifierCreationParams) validateSMTPServerID(formats strfmt.Registry) error {

	if err := validate.Required("smtp_server_id", "body", m.SMTPServerID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this alert notifier creation params based on the context it is used
func (m *AlertNotifierCreationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLanguageCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertNotifierCreationParams) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	if m.Clusters != nil {
		if err := m.Clusters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierCreationParams) contextValidateLanguageCode(ctx context.Context, formats strfmt.Registry) error {

	if m.LanguageCode != nil {
		if err := m.LanguageCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language_code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("language_code")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertNotifierCreationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertNotifierCreationParams) UnmarshalBinary(b []byte) error {
	var res AlertNotifierCreationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
