// Code generated by go-swagger; DO NOT EDIT.

package virtual_private_cloud_route_table

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new virtual private cloud route table API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for virtual private cloud route table API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateVirtualPrivateCloudRouteTable(params *CreateVirtualPrivateCloudRouteTableParams, opts ...ClientOption) (*CreateVirtualPrivateCloudRouteTableOK, error)

	DeleteVirtualPrivateCloudRouteTable(params *DeleteVirtualPrivateCloudRouteTableParams, opts ...ClientOption) (*DeleteVirtualPrivateCloudRouteTableOK, error)

	GetVirtualPrivateCloudRouteTables(params *GetVirtualPrivateCloudRouteTablesParams, opts ...ClientOption) (*GetVirtualPrivateCloudRouteTablesOK, error)

	GetVirtualPrivateCloudRouteTablesConnection(params *GetVirtualPrivateCloudRouteTablesConnectionParams, opts ...ClientOption) (*GetVirtualPrivateCloudRouteTablesConnectionOK, error)

	UpdateVirtualPrivateCloudRouteTable(params *UpdateVirtualPrivateCloudRouteTableParams, opts ...ClientOption) (*UpdateVirtualPrivateCloudRouteTableOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateVirtualPrivateCloudRouteTable create virtual private cloud route table API
*/
func (a *Client) CreateVirtualPrivateCloudRouteTable(params *CreateVirtualPrivateCloudRouteTableParams, opts ...ClientOption) (*CreateVirtualPrivateCloudRouteTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVirtualPrivateCloudRouteTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateVirtualPrivateCloudRouteTable",
		Method:             "POST",
		PathPattern:        "/create-virtual-private-cloud-route-table",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVirtualPrivateCloudRouteTableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVirtualPrivateCloudRouteTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVirtualPrivateCloudRouteTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVirtualPrivateCloudRouteTable delete virtual private cloud route table API
*/
func (a *Client) DeleteVirtualPrivateCloudRouteTable(params *DeleteVirtualPrivateCloudRouteTableParams, opts ...ClientOption) (*DeleteVirtualPrivateCloudRouteTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVirtualPrivateCloudRouteTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVirtualPrivateCloudRouteTable",
		Method:             "POST",
		PathPattern:        "/delete-virtual-private-cloud-route-table",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVirtualPrivateCloudRouteTableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVirtualPrivateCloudRouteTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVirtualPrivateCloudRouteTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVirtualPrivateCloudRouteTables get virtual private cloud route tables API
*/
func (a *Client) GetVirtualPrivateCloudRouteTables(params *GetVirtualPrivateCloudRouteTablesParams, opts ...ClientOption) (*GetVirtualPrivateCloudRouteTablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVirtualPrivateCloudRouteTablesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVirtualPrivateCloudRouteTables",
		Method:             "POST",
		PathPattern:        "/get-virtual-private-cloud-route-tables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVirtualPrivateCloudRouteTablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVirtualPrivateCloudRouteTablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVirtualPrivateCloudRouteTables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVirtualPrivateCloudRouteTablesConnection get virtual private cloud route tables connection API
*/
func (a *Client) GetVirtualPrivateCloudRouteTablesConnection(params *GetVirtualPrivateCloudRouteTablesConnectionParams, opts ...ClientOption) (*GetVirtualPrivateCloudRouteTablesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVirtualPrivateCloudRouteTablesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVirtualPrivateCloudRouteTablesConnection",
		Method:             "POST",
		PathPattern:        "/get-virtual-private-cloud-route-tables-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVirtualPrivateCloudRouteTablesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVirtualPrivateCloudRouteTablesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVirtualPrivateCloudRouteTablesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVirtualPrivateCloudRouteTable update virtual private cloud route table API
*/
func (a *Client) UpdateVirtualPrivateCloudRouteTable(params *UpdateVirtualPrivateCloudRouteTableParams, opts ...ClientOption) (*UpdateVirtualPrivateCloudRouteTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVirtualPrivateCloudRouteTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateVirtualPrivateCloudRouteTable",
		Method:             "POST",
		PathPattern:        "/update-virtual-private-cloud-route-table",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVirtualPrivateCloudRouteTableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVirtualPrivateCloudRouteTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateVirtualPrivateCloudRouteTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
