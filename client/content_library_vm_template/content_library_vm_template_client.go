// Code generated by go-swagger; DO NOT EDIT.

package content_library_vm_template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new content library vm template API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for content library vm template API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CloneContentLibraryVMTemplateFromVM(params *CloneContentLibraryVMTemplateFromVMParams, opts ...ClientOption) (*CloneContentLibraryVMTemplateFromVMOK, error)

	ConvertContentLibraryVMTemplateFromVM(params *ConvertContentLibraryVMTemplateFromVMParams, opts ...ClientOption) (*ConvertContentLibraryVMTemplateFromVMOK, error)

	DeleteContentLibraryVMTemplate(params *DeleteContentLibraryVMTemplateParams, opts ...ClientOption) (*DeleteContentLibraryVMTemplateOK, error)

	DistributeContentLibraryVmtemplateClusters(params *DistributeContentLibraryVmtemplateClustersParams, opts ...ClientOption) (*DistributeContentLibraryVmtemplateClustersOK, error)

	ExportContentLibraryVMTemplate(params *ExportContentLibraryVMTemplateParams, opts ...ClientOption) (*ExportContentLibraryVMTemplateOK, error)

	GetContentLibraryVMTemplates(params *GetContentLibraryVMTemplatesParams, opts ...ClientOption) (*GetContentLibraryVMTemplatesOK, error)

	GetContentLibraryVMTemplatesConnection(params *GetContentLibraryVMTemplatesConnectionParams, opts ...ClientOption) (*GetContentLibraryVMTemplatesConnectionOK, error)

	ImportContentLibraryVMTemplate(params *ImportContentLibraryVMTemplateParams, opts ...ClientOption) (*ImportContentLibraryVMTemplateOK, error)

	RemoveContentLibraryVMTemplateClusters(params *RemoveContentLibraryVMTemplateClustersParams, opts ...ClientOption) (*RemoveContentLibraryVMTemplateClustersOK, error)

	UpdateContentLibraryVMTemplate(params *UpdateContentLibraryVMTemplateParams, opts ...ClientOption) (*UpdateContentLibraryVMTemplateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CloneContentLibraryVMTemplateFromVM clone content library Vm template from Vm API
*/
func (a *Client) CloneContentLibraryVMTemplateFromVM(params *CloneContentLibraryVMTemplateFromVMParams, opts ...ClientOption) (*CloneContentLibraryVMTemplateFromVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneContentLibraryVMTemplateFromVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloneContentLibraryVmTemplateFromVm",
		Method:             "POST",
		PathPattern:        "/clone-content-library-vm-template-from-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloneContentLibraryVMTemplateFromVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneContentLibraryVMTemplateFromVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CloneContentLibraryVmTemplateFromVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConvertContentLibraryVMTemplateFromVM convert content library Vm template from Vm API
*/
func (a *Client) ConvertContentLibraryVMTemplateFromVM(params *ConvertContentLibraryVMTemplateFromVMParams, opts ...ClientOption) (*ConvertContentLibraryVMTemplateFromVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConvertContentLibraryVMTemplateFromVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConvertContentLibraryVmTemplateFromVm",
		Method:             "POST",
		PathPattern:        "/convert-content-library-vm-template-from-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConvertContentLibraryVMTemplateFromVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConvertContentLibraryVMTemplateFromVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConvertContentLibraryVmTemplateFromVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteContentLibraryVMTemplate delete content library Vm template API
*/
func (a *Client) DeleteContentLibraryVMTemplate(params *DeleteContentLibraryVMTemplateParams, opts ...ClientOption) (*DeleteContentLibraryVMTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteContentLibraryVMTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteContentLibraryVmTemplate",
		Method:             "POST",
		PathPattern:        "/delete-content-library-vm-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteContentLibraryVMTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteContentLibraryVMTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteContentLibraryVmTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DistributeContentLibraryVmtemplateClusters distribute content library vmtemplate clusters API
*/
func (a *Client) DistributeContentLibraryVmtemplateClusters(params *DistributeContentLibraryVmtemplateClustersParams, opts ...ClientOption) (*DistributeContentLibraryVmtemplateClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistributeContentLibraryVmtemplateClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DistributeContentLibraryVmtemplateClusters",
		Method:             "POST",
		PathPattern:        "/distribute-content-library-vm-template-clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DistributeContentLibraryVmtemplateClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistributeContentLibraryVmtemplateClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DistributeContentLibraryVmtemplateClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportContentLibraryVMTemplate export content library Vm template API
*/
func (a *Client) ExportContentLibraryVMTemplate(params *ExportContentLibraryVMTemplateParams, opts ...ClientOption) (*ExportContentLibraryVMTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportContentLibraryVMTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExportContentLibraryVmTemplate",
		Method:             "POST",
		PathPattern:        "/export-content-library-vm-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportContentLibraryVMTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportContentLibraryVMTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExportContentLibraryVmTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetContentLibraryVMTemplates get content library Vm templates API
*/
func (a *Client) GetContentLibraryVMTemplates(params *GetContentLibraryVMTemplatesParams, opts ...ClientOption) (*GetContentLibraryVMTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContentLibraryVMTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetContentLibraryVmTemplates",
		Method:             "POST",
		PathPattern:        "/get-content-library-vm-templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetContentLibraryVMTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContentLibraryVMTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetContentLibraryVmTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetContentLibraryVMTemplatesConnection get content library Vm templates connection API
*/
func (a *Client) GetContentLibraryVMTemplatesConnection(params *GetContentLibraryVMTemplatesConnectionParams, opts ...ClientOption) (*GetContentLibraryVMTemplatesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContentLibraryVMTemplatesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetContentLibraryVmTemplatesConnection",
		Method:             "POST",
		PathPattern:        "/get-content-library-vm-templates-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetContentLibraryVMTemplatesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContentLibraryVMTemplatesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetContentLibraryVmTemplatesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImportContentLibraryVMTemplate import content library Vm template API
*/
func (a *Client) ImportContentLibraryVMTemplate(params *ImportContentLibraryVMTemplateParams, opts ...ClientOption) (*ImportContentLibraryVMTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportContentLibraryVMTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImportContentLibraryVmTemplate",
		Method:             "POST",
		PathPattern:        "/import-content-library-vm-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ImportContentLibraryVMTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportContentLibraryVMTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImportContentLibraryVmTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveContentLibraryVMTemplateClusters remove content library Vm template clusters API
*/
func (a *Client) RemoveContentLibraryVMTemplateClusters(params *RemoveContentLibraryVMTemplateClustersParams, opts ...ClientOption) (*RemoveContentLibraryVMTemplateClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveContentLibraryVMTemplateClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RemoveContentLibraryVmTemplateClusters",
		Method:             "POST",
		PathPattern:        "/remove-content-library-vm-template-clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveContentLibraryVMTemplateClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveContentLibraryVMTemplateClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveContentLibraryVmTemplateClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateContentLibraryVMTemplate update content library Vm template API
*/
func (a *Client) UpdateContentLibraryVMTemplate(params *UpdateContentLibraryVMTemplateParams, opts ...ClientOption) (*UpdateContentLibraryVMTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateContentLibraryVMTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateContentLibraryVmTemplate",
		Method:             "POST",
		PathPattern:        "/update-content-library-vm-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateContentLibraryVMTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateContentLibraryVMTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateContentLibraryVmTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
