// Code generated by go-swagger; DO NOT EDIT.

package virtual_private_cloud_subnet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new virtual private cloud subnet API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for virtual private cloud subnet API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateVirtualPrivateCloudSubnet(params *CreateVirtualPrivateCloudSubnetParams, opts ...ClientOption) (*CreateVirtualPrivateCloudSubnetOK, error)

	DeleteVirtualPrivateCloudSubnet(params *DeleteVirtualPrivateCloudSubnetParams, opts ...ClientOption) (*DeleteVirtualPrivateCloudSubnetOK, error)

	GetVirtualPrivateCloudSubnets(params *GetVirtualPrivateCloudSubnetsParams, opts ...ClientOption) (*GetVirtualPrivateCloudSubnetsOK, error)

	GetVirtualPrivateCloudSubnetsConnection(params *GetVirtualPrivateCloudSubnetsConnectionParams, opts ...ClientOption) (*GetVirtualPrivateCloudSubnetsConnectionOK, error)

	UpdateVirtualPrivateCloudSubnet(params *UpdateVirtualPrivateCloudSubnetParams, opts ...ClientOption) (*UpdateVirtualPrivateCloudSubnetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateVirtualPrivateCloudSubnet create virtual private cloud subnet API
*/
func (a *Client) CreateVirtualPrivateCloudSubnet(params *CreateVirtualPrivateCloudSubnetParams, opts ...ClientOption) (*CreateVirtualPrivateCloudSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVirtualPrivateCloudSubnetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateVirtualPrivateCloudSubnet",
		Method:             "POST",
		PathPattern:        "/create-virtual-private-cloud-subnet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVirtualPrivateCloudSubnetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVirtualPrivateCloudSubnetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVirtualPrivateCloudSubnet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVirtualPrivateCloudSubnet delete virtual private cloud subnet API
*/
func (a *Client) DeleteVirtualPrivateCloudSubnet(params *DeleteVirtualPrivateCloudSubnetParams, opts ...ClientOption) (*DeleteVirtualPrivateCloudSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVirtualPrivateCloudSubnetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVirtualPrivateCloudSubnet",
		Method:             "POST",
		PathPattern:        "/delete-virtual-private-cloud-subnet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVirtualPrivateCloudSubnetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVirtualPrivateCloudSubnetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVirtualPrivateCloudSubnet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVirtualPrivateCloudSubnets get virtual private cloud subnets API
*/
func (a *Client) GetVirtualPrivateCloudSubnets(params *GetVirtualPrivateCloudSubnetsParams, opts ...ClientOption) (*GetVirtualPrivateCloudSubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVirtualPrivateCloudSubnetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVirtualPrivateCloudSubnets",
		Method:             "POST",
		PathPattern:        "/get-virtual-private-cloud-subnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVirtualPrivateCloudSubnetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVirtualPrivateCloudSubnetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVirtualPrivateCloudSubnets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVirtualPrivateCloudSubnetsConnection get virtual private cloud subnets connection API
*/
func (a *Client) GetVirtualPrivateCloudSubnetsConnection(params *GetVirtualPrivateCloudSubnetsConnectionParams, opts ...ClientOption) (*GetVirtualPrivateCloudSubnetsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVirtualPrivateCloudSubnetsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVirtualPrivateCloudSubnetsConnection",
		Method:             "POST",
		PathPattern:        "/get-virtual-private-cloud-subnets-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVirtualPrivateCloudSubnetsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVirtualPrivateCloudSubnetsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVirtualPrivateCloudSubnetsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVirtualPrivateCloudSubnet update virtual private cloud subnet API
*/
func (a *Client) UpdateVirtualPrivateCloudSubnet(params *UpdateVirtualPrivateCloudSubnetParams, opts ...ClientOption) (*UpdateVirtualPrivateCloudSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVirtualPrivateCloudSubnetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateVirtualPrivateCloudSubnet",
		Method:             "POST",
		PathPattern:        "/update-virtual-private-cloud-subnet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVirtualPrivateCloudSubnetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVirtualPrivateCloudSubnetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateVirtualPrivateCloudSubnet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
