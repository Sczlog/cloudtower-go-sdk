// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new metrics API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for metrics API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetClusterMetrics(params *GetClusterMetricsParams, opts ...ClientOption) (*GetClusterMetricsOK, error)

	GetDiskMetrics(params *GetDiskMetricsParams, opts ...ClientOption) (*GetDiskMetricsOK, error)

	GetHostMetrics(params *GetHostMetricsParams, opts ...ClientOption) (*GetHostMetricsOK, error)

	GetHostNetworkMetrics(params *GetHostNetworkMetricsParams, opts ...ClientOption) (*GetHostNetworkMetricsOK, error)

	GetHostServicekMetrics(params *GetHostServicekMetricsParams, opts ...ClientOption) (*GetHostServicekMetricsOK, error)

	GetLunMetrics(params *GetLunMetricsParams, opts ...ClientOption) (*GetLunMetricsOK, error)

	GetNvmfNamespaceMetrics(params *GetNvmfNamespaceMetricsParams, opts ...ClientOption) (*GetNvmfNamespaceMetricsOK, error)

	GetSCVMMetrics(params *GetSCVMMetricsParams, opts ...ClientOption) (*GetSCVMMetricsOK, error)

	GetSCVMServicekMetrics(params *GetSCVMServicekMetricsParams, opts ...ClientOption) (*GetSCVMServicekMetricsOK, error)

	GetScvmDiskMetrics(params *GetScvmDiskMetricsParams, opts ...ClientOption) (*GetScvmDiskMetricsOK, error)

	GetScvmNetworkMetrics(params *GetScvmNetworkMetricsParams, opts ...ClientOption) (*GetScvmNetworkMetricsOK, error)

	GetTopNVMVolumeMetrics(params *GetTopNVMVolumeMetricsParams, opts ...ClientOption) (*GetTopNVMVolumeMetricsOK, error)

	GetVMMetrics(params *GetVMMetricsParams, opts ...ClientOption) (*GetVMMetricsOK, error)

	GetVMNetWorkMetrics(params *GetVMNetWorkMetricsParams, opts ...ClientOption) (*GetVMNetWorkMetricsOK, error)

	GetVMVolumeMetrics(params *GetVMVolumeMetricsParams, opts ...ClientOption) (*GetVMVolumeMetricsOK, error)

	GetWitnessMetrics(params *GetWitnessMetricsParams, opts ...ClientOption) (*GetWitnessMetricsOK, error)

	GetZoneMetrics(params *GetZoneMetricsParams, opts ...ClientOption) (*GetZoneMetricsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetClusterMetrics get cluster metrics API
*/
func (a *Client) GetClusterMetrics(params *GetClusterMetricsParams, opts ...ClientOption) (*GetClusterMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterMetrics",
		Method:             "POST",
		PathPattern:        "/get-cluster-metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClusterMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDiskMetrics get disk metrics API
*/
func (a *Client) GetDiskMetrics(params *GetDiskMetricsParams, opts ...ClientOption) (*GetDiskMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiskMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDiskMetrics",
		Method:             "POST",
		PathPattern:        "/get-disk-metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDiskMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDiskMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDiskMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHostMetrics get host metrics API
*/
func (a *Client) GetHostMetrics(params *GetHostMetricsParams, opts ...ClientOption) (*GetHostMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHostMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetHostMetrics",
		Method:             "POST",
		PathPattern:        "/get-host-metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHostMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHostMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetHostMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHostNetworkMetrics get host network metrics API
*/
func (a *Client) GetHostNetworkMetrics(params *GetHostNetworkMetricsParams, opts ...ClientOption) (*GetHostNetworkMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHostNetworkMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetHostNetworkMetrics",
		Method:             "POST",
		PathPattern:        "/get-host-network-metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHostNetworkMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHostNetworkMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetHostNetworkMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHostServicekMetrics get host servicek metrics API
*/
func (a *Client) GetHostServicekMetrics(params *GetHostServicekMetricsParams, opts ...ClientOption) (*GetHostServicekMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHostServicekMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetHostServicekMetrics",
		Method:             "POST",
		PathPattern:        "/get-host-service-metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHostServicekMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHostServicekMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetHostServicekMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLunMetrics get lun metrics API
*/
func (a *Client) GetLunMetrics(params *GetLunMetricsParams, opts ...ClientOption) (*GetLunMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLunMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLunMetrics",
		Method:             "POST",
		PathPattern:        "/get-lun-metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLunMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLunMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLunMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNvmfNamespaceMetrics get nvmf namespace metrics API
*/
func (a *Client) GetNvmfNamespaceMetrics(params *GetNvmfNamespaceMetricsParams, opts ...ClientOption) (*GetNvmfNamespaceMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNvmfNamespaceMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNvmfNamespaceMetrics",
		Method:             "POST",
		PathPattern:        "/get-nvmf-namespace-metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNvmfNamespaceMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNvmfNamespaceMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNvmfNamespaceMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSCVMMetrics get s c VM metrics API
*/
func (a *Client) GetSCVMMetrics(params *GetSCVMMetricsParams, opts ...ClientOption) (*GetSCVMMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSCVMMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSCVMMetrics",
		Method:             "POST",
		PathPattern:        "/get-scvm-metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSCVMMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSCVMMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSCVMMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSCVMServicekMetrics get s c VM servicek metrics API
*/
func (a *Client) GetSCVMServicekMetrics(params *GetSCVMServicekMetricsParams, opts ...ClientOption) (*GetSCVMServicekMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSCVMServicekMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSCVMServicekMetrics",
		Method:             "POST",
		PathPattern:        "/get-scvm-service-metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSCVMServicekMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSCVMServicekMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSCVMServicekMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScvmDiskMetrics get scvm disk metrics API
*/
func (a *Client) GetScvmDiskMetrics(params *GetScvmDiskMetricsParams, opts ...ClientOption) (*GetScvmDiskMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScvmDiskMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetScvmDiskMetrics",
		Method:             "POST",
		PathPattern:        "/get-scvm-disk-metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetScvmDiskMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScvmDiskMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScvmDiskMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScvmNetworkMetrics get scvm network metrics API
*/
func (a *Client) GetScvmNetworkMetrics(params *GetScvmNetworkMetricsParams, opts ...ClientOption) (*GetScvmNetworkMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScvmNetworkMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetScvmNetworkMetrics",
		Method:             "POST",
		PathPattern:        "/get-scvm-network-metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetScvmNetworkMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScvmNetworkMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScvmNetworkMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTopNVMVolumeMetrics get top n Vm volume metrics API
*/
func (a *Client) GetTopNVMVolumeMetrics(params *GetTopNVMVolumeMetricsParams, opts ...ClientOption) (*GetTopNVMVolumeMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTopNVMVolumeMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTopNVmVolumeMetrics",
		Method:             "POST",
		PathPattern:        "/get-top-n-metrics-in-clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTopNVMVolumeMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTopNVMVolumeMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTopNVmVolumeMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMMetrics get Vm metrics API
*/
func (a *Client) GetVMMetrics(params *GetVMMetricsParams, opts ...ClientOption) (*GetVMMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmMetrics",
		Method:             "POST",
		PathPattern:        "/get-vm-metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMNetWorkMetrics get Vm net work metrics API
*/
func (a *Client) GetVMNetWorkMetrics(params *GetVMNetWorkMetricsParams, opts ...ClientOption) (*GetVMNetWorkMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMNetWorkMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmNetWorkMetrics",
		Method:             "POST",
		PathPattern:        "/get-vm-network-metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMNetWorkMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMNetWorkMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmNetWorkMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMVolumeMetrics get Vm volume metrics API
*/
func (a *Client) GetVMVolumeMetrics(params *GetVMVolumeMetricsParams, opts ...ClientOption) (*GetVMVolumeMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMVolumeMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmVolumeMetrics",
		Method:             "POST",
		PathPattern:        "/get-vm-volume-metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMVolumeMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMVolumeMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmVolumeMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWitnessMetrics get witness metrics API
*/
func (a *Client) GetWitnessMetrics(params *GetWitnessMetricsParams, opts ...ClientOption) (*GetWitnessMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWitnessMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWitnessMetrics",
		Method:             "POST",
		PathPattern:        "/get-witness-metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWitnessMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWitnessMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWitnessMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetZoneMetrics get zone metrics API
*/
func (a *Client) GetZoneMetrics(params *GetZoneMetricsParams, opts ...ClientOption) (*GetZoneMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetZoneMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetZoneMetrics",
		Method:             "POST",
		PathPattern:        "/get-zone-metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetZoneMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetZoneMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetZoneMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
