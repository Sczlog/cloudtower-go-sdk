// Code generated by go-swagger; DO NOT EDIT.

package virtual_private_cloud

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new virtual private cloud API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for virtual private cloud API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateVirtualPrivateCloud(params *CreateVirtualPrivateCloudParams, opts ...ClientOption) (*CreateVirtualPrivateCloudOK, error)

	DeleteVirtualPrivateCloud(params *DeleteVirtualPrivateCloudParams, opts ...ClientOption) (*DeleteVirtualPrivateCloudOK, error)

	GetVirtualPrivateClouds(params *GetVirtualPrivateCloudsParams, opts ...ClientOption) (*GetVirtualPrivateCloudsOK, error)

	GetVirtualPrivateCloudsConnection(params *GetVirtualPrivateCloudsConnectionParams, opts ...ClientOption) (*GetVirtualPrivateCloudsConnectionOK, error)

	UpdateVirtualPrivateCloud(params *UpdateVirtualPrivateCloudParams, opts ...ClientOption) (*UpdateVirtualPrivateCloudOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateVirtualPrivateCloud create virtual private cloud API
*/
func (a *Client) CreateVirtualPrivateCloud(params *CreateVirtualPrivateCloudParams, opts ...ClientOption) (*CreateVirtualPrivateCloudOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVirtualPrivateCloudParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateVirtualPrivateCloud",
		Method:             "POST",
		PathPattern:        "/create-virtual-private-cloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVirtualPrivateCloudReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVirtualPrivateCloudOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVirtualPrivateCloud: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVirtualPrivateCloud delete virtual private cloud API
*/
func (a *Client) DeleteVirtualPrivateCloud(params *DeleteVirtualPrivateCloudParams, opts ...ClientOption) (*DeleteVirtualPrivateCloudOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVirtualPrivateCloudParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVirtualPrivateCloud",
		Method:             "POST",
		PathPattern:        "/delete-virtual-private-cloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVirtualPrivateCloudReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVirtualPrivateCloudOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVirtualPrivateCloud: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVirtualPrivateClouds get virtual private clouds API
*/
func (a *Client) GetVirtualPrivateClouds(params *GetVirtualPrivateCloudsParams, opts ...ClientOption) (*GetVirtualPrivateCloudsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVirtualPrivateCloudsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVirtualPrivateClouds",
		Method:             "POST",
		PathPattern:        "/get-virtual-private-clouds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVirtualPrivateCloudsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVirtualPrivateCloudsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVirtualPrivateClouds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVirtualPrivateCloudsConnection get virtual private clouds connection API
*/
func (a *Client) GetVirtualPrivateCloudsConnection(params *GetVirtualPrivateCloudsConnectionParams, opts ...ClientOption) (*GetVirtualPrivateCloudsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVirtualPrivateCloudsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVirtualPrivateCloudsConnection",
		Method:             "POST",
		PathPattern:        "/get-virtual-private-clouds-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVirtualPrivateCloudsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVirtualPrivateCloudsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVirtualPrivateCloudsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVirtualPrivateCloud update virtual private cloud API
*/
func (a *Client) UpdateVirtualPrivateCloud(params *UpdateVirtualPrivateCloudParams, opts ...ClientOption) (*UpdateVirtualPrivateCloudOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVirtualPrivateCloudParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateVirtualPrivateCloud",
		Method:             "POST",
		PathPattern:        "/update-virtual-private-cloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVirtualPrivateCloudReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVirtualPrivateCloudOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateVirtualPrivateCloud: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
