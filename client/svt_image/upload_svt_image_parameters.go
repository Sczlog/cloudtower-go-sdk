// Code generated by go-swagger; DO NOT EDIT.

package svt_image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUploadSvtImageParams creates a new UploadSvtImageParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUploadSvtImageParams() *UploadSvtImageParams {
	return &UploadSvtImageParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUploadSvtImageParamsWithTimeout creates a new UploadSvtImageParams object
// with the ability to set a timeout on a request.
func NewUploadSvtImageParamsWithTimeout(timeout time.Duration) *UploadSvtImageParams {
	return &UploadSvtImageParams{
		timeout: timeout,
	}
}

// NewUploadSvtImageParamsWithContext creates a new UploadSvtImageParams object
// with the ability to set a context for a request.
func NewUploadSvtImageParamsWithContext(ctx context.Context) *UploadSvtImageParams {
	return &UploadSvtImageParams{
		Context: ctx,
	}
}

// NewUploadSvtImageParamsWithHTTPClient creates a new UploadSvtImageParams object
// with the ability to set a custom HTTPClient for a request.
func NewUploadSvtImageParamsWithHTTPClient(client *http.Client) *UploadSvtImageParams {
	return &UploadSvtImageParams{
		HTTPClient: client,
	}
}

/* UploadSvtImageParams contains all the parameters to send to the API endpoint
   for the upload svt image operation.

   Typically these are written to a http.Request.
*/
type UploadSvtImageParams struct {

	// ClusterID.
	ClusterID *string

	// ContentLanguage.
	//
	// Default: "en-US"
	ContentLanguage *string

	// File.
	File runtime.NamedReadCloser

	// Name.
	Name *string

	// Size.
	Size *string

	// UploadTaskID.
	UploadTaskID *string

	// Version.
	Version *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the upload svt image params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadSvtImageParams) WithDefaults() *UploadSvtImageParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the upload svt image params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadSvtImageParams) SetDefaults() {
	var (
		contentLanguageDefault = string("en-US")
	)

	val := UploadSvtImageParams{
		ContentLanguage: &contentLanguageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the upload svt image params
func (o *UploadSvtImageParams) WithTimeout(timeout time.Duration) *UploadSvtImageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload svt image params
func (o *UploadSvtImageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload svt image params
func (o *UploadSvtImageParams) WithContext(ctx context.Context) *UploadSvtImageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload svt image params
func (o *UploadSvtImageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload svt image params
func (o *UploadSvtImageParams) WithHTTPClient(client *http.Client) *UploadSvtImageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload svt image params
func (o *UploadSvtImageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the upload svt image params
func (o *UploadSvtImageParams) WithClusterID(clusterID *string) *UploadSvtImageParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the upload svt image params
func (o *UploadSvtImageParams) SetClusterID(clusterID *string) {
	o.ClusterID = clusterID
}

// WithContentLanguage adds the contentLanguage to the upload svt image params
func (o *UploadSvtImageParams) WithContentLanguage(contentLanguage *string) *UploadSvtImageParams {
	o.SetContentLanguage(contentLanguage)
	return o
}

// SetContentLanguage adds the contentLanguage to the upload svt image params
func (o *UploadSvtImageParams) SetContentLanguage(contentLanguage *string) {
	o.ContentLanguage = contentLanguage
}

// WithFile adds the file to the upload svt image params
func (o *UploadSvtImageParams) WithFile(file runtime.NamedReadCloser) *UploadSvtImageParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the upload svt image params
func (o *UploadSvtImageParams) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WithName adds the name to the upload svt image params
func (o *UploadSvtImageParams) WithName(name *string) *UploadSvtImageParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the upload svt image params
func (o *UploadSvtImageParams) SetName(name *string) {
	o.Name = name
}

// WithSize adds the size to the upload svt image params
func (o *UploadSvtImageParams) WithSize(size *string) *UploadSvtImageParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the upload svt image params
func (o *UploadSvtImageParams) SetSize(size *string) {
	o.Size = size
}

// WithUploadTaskID adds the uploadTaskID to the upload svt image params
func (o *UploadSvtImageParams) WithUploadTaskID(uploadTaskID *string) *UploadSvtImageParams {
	o.SetUploadTaskID(uploadTaskID)
	return o
}

// SetUploadTaskID adds the uploadTaskId to the upload svt image params
func (o *UploadSvtImageParams) SetUploadTaskID(uploadTaskID *string) {
	o.UploadTaskID = uploadTaskID
}

// WithVersion adds the version to the upload svt image params
func (o *UploadSvtImageParams) WithVersion(version *string) *UploadSvtImageParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the upload svt image params
func (o *UploadSvtImageParams) SetVersion(version *string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *UploadSvtImageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterID != nil {

		// form param cluster_id
		var frClusterID string
		if o.ClusterID != nil {
			frClusterID = *o.ClusterID
		}
		fClusterID := frClusterID
		if fClusterID != "" {
			if err := r.SetFormParam("cluster_id", fClusterID); err != nil {
				return err
			}
		}
	}

	if o.ContentLanguage != nil {

		// header param content-language
		if err := r.SetHeaderParam("content-language", *o.ContentLanguage); err != nil {
			return err
		}
	}
	// form file param file
	if err := r.SetFileParam("file", o.File); err != nil {
		return err
	}

	if o.Name != nil {

		// form param name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("name", fName); err != nil {
				return err
			}
		}
	}

	if o.Size != nil {

		// form param size
		var frSize string
		if o.Size != nil {
			frSize = *o.Size
		}
		fSize := frSize
		if fSize != "" {
			if err := r.SetFormParam("size", fSize); err != nil {
				return err
			}
		}
	}

	if o.UploadTaskID != nil {

		// form param upload_task_id
		var frUploadTaskID string
		if o.UploadTaskID != nil {
			frUploadTaskID = *o.UploadTaskID
		}
		fUploadTaskID := frUploadTaskID
		if fUploadTaskID != "" {
			if err := r.SetFormParam("upload_task_id", fUploadTaskID); err != nil {
				return err
			}
		}
	}

	if o.Version != nil {

		// form param version
		var frVersion string
		if o.Version != nil {
			frVersion = *o.Version
		}
		fVersion := frVersion
		if fVersion != "" {
			if err := r.SetFormParam("version", fVersion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
